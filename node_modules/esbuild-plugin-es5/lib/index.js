"use strict";
/**
 * A plugin for the esbuild
 * convert code to es5 use @swc/core
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.es5Plugin = exports.transformFile = void 0;
const core_1 = require("@swc/core");
const deepmerge_1 = __importDefault(require("deepmerge"));
const convertError_1 = require("./convertError");
function transformFile(file, options) {
    const isTs = file.endsWith('.ts') || file.endsWith('.tsx');
    const isReact = file.endsWith('.jsx') || file.endsWith('.tsx');
    let transformOptions = {
        jsc: {
            parser: { syntax: isTs ? 'typescript' : 'ecmascript', tsx: isReact && isTs, jsx: isReact && !isTs },
            target: 'es5',
            /**
             * Use external helpers to avoid duplicate helpers in the output.
             * esbuild muse has alias `@swc/helpers`
             */
            externalHelpers: true,
        },
        module: { type: 'es6' },
        sourceFileName: file,
        isModule: true,
    };
    if (options) {
        transformOptions = (0, deepmerge_1.default)(transformOptions, options);
    }
    return (0, core_1.transformFile)(file, transformOptions);
}
exports.transformFile = transformFile;
function es5Plugin(options) {
    return {
        name: 'es5',
        setup(build) {
            const buildOptions = build.initialOptions;
            const enableSourcemap = !!buildOptions.sourcemap;
            build.onLoad({ filter: (options === null || options === void 0 ? void 0 : options.filter) || /\.([tj]sx?|mjs)$/ }, args => {
                return new Promise(resolve => {
                    const opts = (0, deepmerge_1.default)((options === null || options === void 0 ? void 0 : options.swc) || {}, {
                        /**
                         * Generate inline source maps to enable esbuild to properly handle sourcemaps.
                         */
                        sourceMaps: enableSourcemap ? 'inline' : false,
                    });
                    transformFile(args.path, opts)
                        .then(({ code }) => {
                        resolve({ contents: code, loader: 'js' });
                    })
                        .catch(error => {
                        resolve({ pluginName: 'es5', errors: [(0, convertError_1.convertError)(error)] });
                    });
                });
            });
        },
    };
}
exports.es5Plugin = es5Plugin;

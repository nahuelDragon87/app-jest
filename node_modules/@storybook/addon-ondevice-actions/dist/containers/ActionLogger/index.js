"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const manager_api_1 = require("@storybook/core/manager-api");
const core_events_1 = require("@storybook/core/core-events");
const addon_actions_1 = require("@storybook/addon-actions");
const ActionLogger_1 = require("../../components/ActionLogger");
const safeDeepEqual = (a, b) => {
    try {
        return (0, fast_deep_equal_1.default)(a, b);
    }
    catch (e) {
        return false;
    }
};
const ActionLogger = ({ active }) => {
    const [actions, setActions] = (0, react_1.useState)([]);
    const clearActions = () => setActions([]);
    const clearActionsOnStoryChange = actions.length > 0 && actions[0].options.clearOnStoryChange;
    (0, react_1.useEffect)(() => {
        const handleStoryChange = () => {
            if (clearActionsOnStoryChange) {
                clearActions();
            }
        };
        const channel = manager_api_1.addons.getChannel();
        channel.addListener(core_events_1.SET_CURRENT_STORY, handleStoryChange);
        return () => {
            channel.removeListener(core_events_1.SET_CURRENT_STORY, handleStoryChange);
        };
    }, [clearActionsOnStoryChange]);
    (0, react_1.useEffect)(() => {
        const addAction = (action) => {
            setActions((prevState) => {
                if (prevState.find((a) => a.id === action.id)) {
                    return prevState;
                }
                const newActions = [...prevState];
                const previous = newActions.length && newActions[0];
                if (previous && safeDeepEqual(previous.data, action.data)) {
                    previous.count++;
                }
                else {
                    action.count = 1;
                    newActions.unshift(action);
                }
                return newActions.slice(0, action.options.limit);
            });
        };
        const channel = manager_api_1.addons.getChannel();
        channel.addListener(addon_actions_1.EVENT_ID, addAction);
        return () => {
            channel.removeListener(addon_actions_1.EVENT_ID, addAction);
        };
    }, []);
    return active ? (0, jsx_runtime_1.jsx)(ActionLogger_1.ActionLogger, { actions: actions, onClear: clearActions }) : null;
};
exports.default = ActionLogger;

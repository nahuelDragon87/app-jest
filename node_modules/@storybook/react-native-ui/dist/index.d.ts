import * as _storybook_react_native_theming from '@storybook/react-native-theming';
import * as react_native from 'react-native';
import { PressableProps, View, TouchableOpacityProps } from 'react-native';
import * as React$1 from 'react';
import React__default, { FC, ComponentProps, ReactElement, PropsWithChildren, ReactNode } from 'react';
import { State, StoriesHash, API } from '@storybook/core/manager-api';
import { API_StatusState, API_StatusValue, API_LoadedRefData, Addon_SidebarTopType, Addon_SidebarBottomType, API_IndexHash, StoryContext, Args, API_PreparedStoryIndex, StoryIndexV2, StoryIndexV3, API_Provider, DocsOptions } from '@storybook/core/types';
import * as Fuse from 'fuse.js';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { SvgProps } from 'react-native-svg';
import { ReactRenderer } from '@storybook/react';

interface NodeProps$1 {
    children: React__default.ReactNode | React__default.ReactNode[];
    isExpandable?: boolean;
    isExpanded?: boolean;
}
declare const BranchNode: _storybook_react_native_theming.StyledComponent<react_native.TouchableOpacityProps & React__default.RefAttributes<react_native.View> & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React__default.ElementType;
} & {
    depth?: number;
    isExpandable?: boolean;
    isExpanded?: boolean;
    isComponent?: boolean;
    isSelected?: boolean;
}, {}, {
    ref?: React__default.Ref<any>;
}>;
declare const LeafNode: _storybook_react_native_theming.StyledComponent<react_native.TouchableOpacityProps & React__default.RefAttributes<react_native.View> & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React__default.ElementType;
} & {
    depth?: number;
    selected?: boolean;
}, {}, {
    ref?: React__default.Ref<any>;
}>;
declare const GroupNode: FC<ComponentProps<typeof BranchNode> & {
    isExpanded?: boolean;
    isExpandable?: boolean;
}>;
declare const ComponentNode: FC<ComponentProps<typeof BranchNode>>;
declare const StoryNode: FC<ComponentProps<typeof LeafNode>>;

type Refs = State['refs'];
type RefType = Refs[keyof Refs] & {
    status?: API_StatusState;
};
type Item = StoriesHash[keyof StoriesHash];
type Dataset = Record<string, Item>;
interface CombinedDataset {
    hash: Refs;
    entries: [string, RefType][];
}
interface ItemRef {
    itemId: string;
    refId: string;
}
interface StoryRef {
    storyId: string;
    refId: string;
}
type Highlight = ItemRef | null;
type Selection = StoryRef | null;
declare function isExpandType(x: any): x is ExpandType;
interface ExpandType {
    showAll: () => void;
    totalCount: number;
    moreCount: number;
}
type SearchItem = Item & {
    refId: string;
    path: string[];
    status?: API_StatusValue;
    showAll?: () => void;
};
type SearchResult = Fuse.FuseResult<SearchItem>;
type SearchResultProps = SearchResult & {
    icon: string;
    isHighlighted: boolean;
    onPress: PressableProps['onPress'];
};
type GetSearchItemProps = (args: {
    item: SearchResult;
    index: number;
    key: string;
}) => SearchResultProps;
type SearchChildrenFn = (args: {
    query: string;
    results: SearchResult[];
    isBrowsing: boolean;
    closeMenu: (cb?: () => void) => void;
    getItemProps: GetSearchItemProps;
    highlightedIndex: number | null;
}) => React.ReactNode;

interface ExpandAction {
    ids: string[];
    value: boolean;
}

interface NodeProps {
    item: Item;
    refId: string;
    docsMode: boolean;
    isOrphan: boolean;
    isDisplayed: boolean;
    color: string | undefined;
    isSelected: boolean;
    isFullyExpanded?: boolean;
    isExpanded: boolean;
    setExpanded: (action: ExpandAction) => void;
    setFullyExpanded?: () => void;
    onSelectStoryId: (itemId: string) => void;
    status: State['status'][keyof State['status']];
}
declare const Node: React__default.NamedExoticComponent<NodeProps>;
declare const LeafNodeStyleWrapper: _storybook_react_native_theming.StyledComponent<react_native.ViewProps & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React__default.ElementType;
}, {}, {
    ref?: React__default.Ref<View>;
}>;
declare const RootNode: _storybook_react_native_theming.StyledComponent<react_native.ViewProps & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React__default.ElementType;
}, {}, {
    ref?: React__default.Ref<View>;
}>;
declare const RootNodeText: _storybook_react_native_theming.StyledComponent<react_native.TextProps & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React__default.ElementType;
}, {}, {
    ref?: React__default.Ref<react_native.Text>;
}>;
declare const Tree: React__default.NamedExoticComponent<{
    isBrowsing: boolean;
    isMain: boolean;
    status?: State["status"];
    refId: string;
    data: StoriesHash;
    docsMode: boolean;
    selectedStoryId: string | null;
    onSelectStoryId: (storyId: string) => void;
}>;

interface ButtonProps extends TouchableOpacityProps {
    asChild?: boolean;
    size?: 'small' | 'medium';
    padding?: 'small' | 'medium';
    variant?: 'outline' | 'solid' | 'ghost';
    disabled?: boolean;
    active?: boolean;
    animation?: 'none' | 'rotate360' | 'glow' | 'jiggle';
    text?: string;
    Icon?: (props: SvgProps) => ReactElement;
}
declare const Button: React$1.ForwardRefExoticComponent<ButtonProps & React$1.RefAttributes<any>>;
declare const ButtonText: _storybook_react_native_theming.StyledComponent<react_native.TextProps & {
    theme?: _storybook_react_native_theming.Theme;
    as?: React.ElementType;
} & {
    variant: ButtonProps["variant"];
    active: ButtonProps["active"];
}, {}, {
    ref?: React$1.Ref<react_native.Text>;
}>;
declare const ButtonIcon: ({ Icon, active, variant, }: {
    Icon: (props: SvgProps) => ReactElement;
    variant: ButtonProps["variant"];
    active: ButtonProps["active"];
}) => react_jsx_runtime.JSX.Element;

declare const IconButton: React$1.ForwardRefExoticComponent<ButtonProps & React$1.RefAttributes<unknown>>;

type LayoutContextType = {
    isDesktop: boolean;
    isMobile: boolean;
};
declare const LayoutProvider: FC<PropsWithChildren>;
declare const useLayout: () => LayoutContextType;

interface ExplorerProps {
    isLoading: boolean;
    isBrowsing: boolean;
    dataset: CombinedDataset;
    selected: Selection;
    setSelection: (selection: Selection) => void;
}
declare const Explorer: FC<ExplorerProps>;

declare const useCombination: (index: SidebarProps["index"], indexError: SidebarProps["indexError"], previewInitialized: SidebarProps["previewInitialized"], status: SidebarProps["status"], refs: SidebarProps["refs"]) => CombinedDataset;
interface SidebarProps extends API_LoadedRefData {
    refs: State['refs'];
    status: State['status'];
    extra: Addon_SidebarTopType[];
    bottom?: Addon_SidebarBottomType[];
    storyId?: string;
    refId?: string;
    menuHighlighted?: boolean;
    setSelection: (selection: Selection) => void;
}
declare const Sidebar: React__default.NamedExoticComponent<SidebarProps>;

declare const Layout: ({ storyHash, story, children, }: {
    storyHash: API_IndexHash | undefined;
    story?: StoryContext<ReactRenderer, Args>;
    children: ReactNode | ReactNode[];
}) => react_jsx_runtime.JSX.Element;

type ToStoriesHashOptions = {
    provider: API_Provider<API>;
    docsOptions: DocsOptions;
    filters: State['filters'];
    status: State['status'];
};
declare const transformStoryIndexToStoriesHash: (input: API_PreparedStoryIndex | StoryIndexV2 | StoryIndexV3, { provider, docsOptions, filters, status }: ToStoriesHashOptions) => API_IndexHash | any;
declare const transformStoryIndexV2toV3: (index: StoryIndexV2) => StoryIndexV3;
declare const transformStoryIndexV3toV4: (index: StoryIndexV3) => API_PreparedStoryIndex;

interface Storage {
    getItem: (key: string) => Promise<string | null>;
    setItem: (key: string, value: string) => Promise<void>;
}
declare const StorageProvider: FC<PropsWithChildren<{
    storage: Storage;
}>>;
declare const useStorage: () => Storage;

export { Button, ButtonIcon, ButtonProps, ButtonText, CombinedDataset, ComponentNode, Dataset, ExpandType, Explorer, ExplorerProps, GetSearchItemProps, GroupNode, Highlight, IconButton, Item, ItemRef, Layout, LayoutProvider, LeafNodeStyleWrapper, Node, NodeProps$1 as NodeProps, RefType, Refs, RootNode, RootNodeText, SearchChildrenFn, SearchItem, SearchResult, SearchResultProps, Selection, Sidebar, SidebarProps, StorageProvider, StoryNode, StoryRef, Tree, isExpandType, transformStoryIndexToStoriesHash, transformStoryIndexV2toV3, transformStoryIndexV3toV4, useCombination, useLayout, useStorage };

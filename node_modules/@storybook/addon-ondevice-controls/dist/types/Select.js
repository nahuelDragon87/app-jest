"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_native_theming_1 = require("@storybook/react-native-theming");
const react_native_1 = require("react-native");
const react_native_modal_selector_1 = __importDefault(require("react-native-modal-selector"));
const common_1 = require("./common");
const getOptions = ({ options, control: { labels } }) => {
    if (Array.isArray(options)) {
        if (labels) {
            return options.map((val) => ({ key: val, label: labels[val] || val }));
        }
        return options.map((val) => ({ key: val, label: val }));
    }
    return Object.keys(options).map((key) => ({
        label: key,
        key: options[key],
    }));
};
const SelectType = ({ arg, onChange }) => {
    const { value } = arg;
    const options = getOptions(arg);
    const theme = (0, react_native_theming_1.useTheme)();
    const active = options.find(({ key }) => value === key);
    const selected = active && active.label;
    if (react_native_1.Platform.OS === 'web') {
        const handleChange = (event) => {
            onChange(event.target.value);
        };
        return ((0, jsx_runtime_1.jsx)("select", { value: value, onChange: handleChange, 
            // @ts-ignore
            style: (0, common_1.inputStyle)({ theme }), children: options.map(({ label, key }) => ((0, jsx_runtime_1.jsx)("option", { value: key, children: label }, `${label}-${key}`))) }));
    }
    return ((0, jsx_runtime_1.jsx)(react_native_1.View, { children: (0, jsx_runtime_1.jsx)(react_native_modal_selector_1.default, { data: options, initValue: String(value), onChange: (option) => onChange(option.key), animationType: "none", keyExtractor: ({ key, label }) => `${label}-${key}`, children: (0, jsx_runtime_1.jsx)(common_1.Input, { editable: false, value: String(selected), autoCapitalize: "none", underlineColorAndroid: "transparent" }) }) }));
};
SelectType.serialize = (value) => value;
SelectType.deserialize = (value) => value;
exports.default = SelectType;

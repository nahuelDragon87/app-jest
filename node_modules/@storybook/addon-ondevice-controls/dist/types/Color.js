"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_native_theming_1 = require("@storybook/react-native-theming");
const color_picker_1 = require("../components/color-picker");
const TouchableContainer = react_native_theming_1.styled.View(({ theme }) => ({
    width: 40,
    height: 40,
    borderWidth: 1,
    borderColor: theme.appBorderColor,
    borderRadius: 6,
    padding: 3,
    backgroundColor: theme.background.content,
}));
const Touchable = react_native_theming_1.styled.TouchableOpacity(({ color }) => ({
    width: '100%',
    height: '100%',
    borderRadius: 4,
    backgroundColor: color,
}));
const ButtonTouchable = react_native_theming_1.styled.TouchableOpacity(({ theme, primary }) => {
    return {
        backgroundColor: primary ? theme.color.secondary : theme.button.background,
        borderRadius: 6,
        borderWidth: 1,
        borderColor: primary ? theme.color.secondary : theme.button.border,
        paddingVertical: 6,
        paddingHorizontal: 20,
        justifyContent: 'center',
        alignItems: 'center',
    };
});
const ButtonText = react_native_theming_1.styled.Text(({ theme, primary }) => {
    return {
        color: primary ? theme.color.inverseText : theme.color.defaultText,
        fontSize: theme.typography.size.s2,
        fontWeight: theme.typography.weight.bold,
    };
});
const ColorType = ({ arg, onChange = (value) => value }) => {
    const [displayColorPicker, setDisplayColorPicker] = (0, react_1.useState)(false);
    const [currentColor, setCurrentColor] = (0, react_1.useState)(null);
    const theme = (0, react_native_theming_1.useTheme)();
    const openColorPicker = () => {
        setDisplayColorPicker(true);
    };
    const closeColorPicker = () => {
        setDisplayColorPicker(false);
    };
    const onChangeColor = (color) => {
        onChange((0, color_picker_1.fromHsv)(color));
    };
    if (react_native_1.Platform.OS === 'web') {
        return ((0, jsx_runtime_1.jsx)("input", { type: "color", value: arg.value, onChange: (event) => onChange(event.target.value), style: {
                width: 40,
                height: 40,
                borderWidth: 1,
                borderColor: theme.appBorderColor,
                borderRadius: 6,
                padding: 2,
                backgroundColor: theme.background.content,
            } }));
    }
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { children: [(0, jsx_runtime_1.jsx)(TouchableContainer, { children: (0, jsx_runtime_1.jsx)(Touchable, { color: arg.value, onPress: openColorPicker }) }), (0, jsx_runtime_1.jsxs)(react_native_1.Modal, { supportedOrientations: ['portrait', 'landscape'], transparent: true, visible: displayColorPicker, onRequestClose: closeColorPicker, children: [(0, jsx_runtime_1.jsx)(react_native_1.TouchableWithoutFeedback, { onPress: closeColorPicker, children: (0, jsx_runtime_1.jsx)(react_native_1.View, { style: styles.modalOverlay }) }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: styles.centerContainer, children: (0, jsx_runtime_1.jsxs)(InnerContainer, { pointerEvents: "box-none", children: [(0, jsx_runtime_1.jsx)(color_picker_1.ColorPicker, { onColorSelected: onChangeColor, onColorChange: (color) => setCurrentColor(color), defaultColor: arg.value, oldColor: arg.value, style: styles.picker }), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.actionContainer, children: [(0, jsx_runtime_1.jsx)(ButtonTouchable, { onPress: closeColorPicker, children: (0, jsx_runtime_1.jsx)(ButtonText, { children: "Cancel" }) }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: { width: 12 } }), (0, jsx_runtime_1.jsx)(ButtonTouchable, { primary: true, onPress: () => {
                                                onChangeColor(currentColor);
                                                closeColorPicker();
                                            }, children: (0, jsx_runtime_1.jsx)(ButtonText, { primary: true, children: "Select" }) })] })] }) })] })] }));
};
const InnerContainer = react_native_theming_1.styled.View(({ theme }) => ({
    backgroundColor: theme.background.content,
    borderWidth: 1,
    borderColor: theme.appBorderColor,
    borderRadius: 10,
    margin: 24,
    padding: 10,
    maxWidth: 350,
    height: 400,
    maxHeight: react_native_1.Dimensions.get('screen').height - 24 * 2,
    shadowColor: '#000000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 0 },
    shadowRadius: 16,
    elevation: 10,
}));
const styles = react_native_1.StyleSheet.create({
    actionContainer: {
        paddingTop: 8,
        alignItems: 'flex-end',
        flexDirection: 'row',
        justifyContent: 'flex-end',
        width: '100%',
    },
    picker: { flex: 1 },
    centerContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    modalOverlay: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        backgroundColor: 'rgba(0,0,0,0.3)',
    },
});
ColorType.serialize = (value) => value;
ColorType.deserialize = (value) => value;
exports.default = ColorType;

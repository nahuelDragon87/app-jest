"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
exports.inputStyle = inputStyle;
const jsx_runtime_1 = require("react/jsx-runtime");
const bottom_sheet_1 = require("@gorhom/bottom-sheet");
const react_native_theming_1 = require("@storybook/react-native-theming");
const react_native_ui_1 = require("@storybook/react-native-ui");
const react_1 = require("react");
const react_native_1 = require("react-native");
function inputStyle({ theme, isTextInput = true, focused = false, hasError = false, }) {
    return {
        backgroundColor: theme.input.background,
        // TODO: border?
        borderWidth: 1,
        borderRadius: theme.input.borderRadius,
        borderColor: hasError
            ? theme.color.negative
            : focused
                ? theme.color.secondary
                : theme.input.border,
        fontSize: theme.typography.size.s2 - 1,
        color: theme.input.color,
        paddingHorizontal: theme.input.paddingHorizontal,
        ...react_native_1.Platform.select({
            android: {
                // Android seems to have builtin vertical padding to `TextInput`,
                // but not for multiline inputs.
                paddingVertical: isTextInput ? 0 : undefined,
            },
            web: {
                // The web (that isn't RNW) doesn't understand `paddingHorizontal` etc.
                paddingLeft: theme.input.paddingHorizontal,
                paddingRight: theme.input.paddingHorizontal,
                paddingTop: theme.input.paddingVertical,
                paddingBottom: theme.input.paddingVertical,
                borderStyle: 'solid',
            },
            default: {
                paddingVertical: theme.input.paddingVertical,
            },
        }),
        margin: 0,
    };
}
const TextInputWithSwitcher = (0, react_1.forwardRef)((props, ref) => {
    const { isMobile } = (0, react_native_ui_1.useLayout)();
    return isMobile ? (
    // @ts-ignore
    (0, jsx_runtime_1.jsx)(bottom_sheet_1.BottomSheetTextInput, { ref: ref, ...props })) : ((0, jsx_runtime_1.jsx)(react_native_1.TextInput, { ref: ref, ...props }));
});
exports.Input = (0, react_native_theming_1.styled)(TextInputWithSwitcher)(({ theme, focused, isTextInput, hasError }) => ({
    ...inputStyle({ theme, isTextInput, focused, hasError }),
}));

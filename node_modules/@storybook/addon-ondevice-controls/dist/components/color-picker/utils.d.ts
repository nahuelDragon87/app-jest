import { ColorFormats } from 'tinycolor2';
import { GestureResponderEvent, PanResponderGestureState } from 'react-native';
type Point = {
    x: number;
    y: number;
};
interface PanResponderCallbacks {
    onStart?: (point: Point, evt: GestureResponderEvent, state: PanResponderGestureState) => boolean | void;
    onMove?: (point: Point, evt: GestureResponderEvent, state: PanResponderGestureState) => boolean | void;
    onEnd?: (point: Point, evt: GestureResponderEvent, state: PanResponderGestureState) => boolean | void;
}
/**
 * Converts color to hsv representation.
 * @param {string} color any color representation - name, hexa, rgb
 * @return {object} { h: number, s: number, v: number } object literal
 */
export declare function toHsv(color: string): ColorFormats.HSV;
/**
 * Converts hsv object to hexa color string.
 * @param {object} hsv { h: number, s: number, v: number } object literal
 * @return {string} color in hexa representation
 */
export declare function fromHsv(hsv: ColorFormats.HSV): string;
/**
 * Simplified pan responder wrapper.
 */
export declare function createPanResponder({ onStart, onMove, onEnd, }: PanResponderCallbacks): import("react-native").PanResponderInstance;
/**
 * Rotates point around given center in 2d.
 * Point is object literal { x: number, y: number }
 * @param {point} point to be rotated
 * @param {number} angle in radians
 * @param {point} center to be rotated around
 * @return {point} rotated point
 */
export declare function rotatePoint(point: Point, angle: number, center?: Point): Point;
export {};

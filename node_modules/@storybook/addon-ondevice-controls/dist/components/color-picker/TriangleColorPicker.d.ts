import { PureComponent } from 'react';
import { LayoutChangeEvent } from 'react-native';
import { ColorFormats } from 'tinycolor2';
interface TriangleColorPickerProps {
    color?: string | ColorFormats.HSV;
    defaultColor?: string;
    oldColor?: string;
    onColorChange?: (color: ColorFormats.HSV) => void;
    onColorSelected?: (color: string) => void;
    onOldColorSelected?: (color: string) => void;
    rotationHackFactor?: number;
    style?: object;
}
interface TriangleColorPickerState {
    color: ColorFormats.HSV;
    pickerSize: number | null;
}
export declare class TriangleColorPicker extends PureComponent<TriangleColorPickerProps, TriangleColorPickerState> {
    private _layout;
    private _pageX;
    private _pageY;
    private _changingHColor;
    private _isRTL;
    private _pickerResponder;
    private pickerContainer;
    constructor(props: TriangleColorPickerProps);
    getColor(): any;
    _handleColorChange: ({ x, y }: {
        x: number;
        y: number;
    }) => void;
    _getColor(): any;
    _onColorSelected: () => void;
    _onOldColorSelected: () => void;
    _onSValueChange: (s: number) => void;
    _onVValueChange: (v: number) => void;
    _onColorChange: (color: ColorFormats.HSV) => void;
    _onLayout: (l: LayoutChangeEvent) => void;
    _computeHValue(x: number, y: number): number;
    _hValueToRad(deg: number): number;
    _handleHColorChange: ({ x, y }: {
        x: number;
        y: number;
    }) => void;
    _handleSVColorChange: ({ x, y }: {
        x: number;
        y: number;
    }) => void;
    _normalizeTriangleTouch(s: number, v: number, sRatio: number): {
        s: number;
        v: number;
    };
    _computeColorFromTriangle({ x, y }: {
        x: number;
        y: number;
    }): {
        h: any;
        s: number;
        v: number;
    };
    render(): import("react/jsx-runtime").JSX.Element;
}
export {};

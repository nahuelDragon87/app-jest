"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const NoControlsWarning_1 = __importDefault(require("./NoControlsWarning"));
const PropForm_1 = __importDefault(require("./PropForm"));
const hooks_1 = require("./hooks");
const ControlsPanel = ({ api }) => {
    const store = api.store();
    const storyId = store.getSelection()?.storyId;
    const [isPristine, setIsPristine] = (0, react_1.useState)(true);
    const [argsFromHook, updateArgs, resetArgs] = (0, hooks_1.useArgs)(storyId, store);
    const { argsObject, argTypes, parameters } = react_1.default.useMemo(() => {
        const { argTypes: storyArgTypes, parameters: storyParameters } = store.fromId(storyId);
        const storyArgsObject = Object.entries(storyArgTypes).reduce((prev, [key, argType]) => {
            const isControl = Boolean(argType?.control);
            return isControl
                ? {
                    ...prev,
                    [key]: {
                        ...argType,
                        name: key,
                        type: argType?.control?.type,
                        value: argsFromHook[key],
                    },
                }
                : prev;
        }, {});
        return {
            argTypes: storyArgTypes,
            parameters: storyParameters,
            argsObject: storyArgsObject,
        };
    }, [store, storyId, argsFromHook]);
    const hasControls = Object.keys(argTypes).length > 0;
    const isArgsStory = parameters.__isArgsStory;
    const showWarning = !(hasControls && isArgsStory);
    const updateArgsOnFieldChange = (0, react_1.useCallback)((args) => {
        updateArgs(args);
        setIsPristine(false);
    }, [updateArgs]);
    const handleReset = (0, react_1.useCallback)(() => {
        resetArgs();
        setIsPristine(true);
    }, [resetArgs]);
    if (showWarning) {
        return (0, jsx_runtime_1.jsx)(NoControlsWarning_1.default, {});
    }
    return ((0, jsx_runtime_1.jsx)(PropForm_1.default, { args: argsObject, isPristine: isPristine, onFieldChange: updateArgsOnFieldChange, onReset: handleReset }));
};
exports.default = ControlsPanel;

import * as RN from 'react-native';
import { ImageSourcePropType, ImageProps, TextStyle } from 'react-native';
import * as React$1 from 'react';
import { ReactElement } from 'react';

declare const color: {
    primary: string;
    secondary: string;
    secondaryLighter: string;
    tertiary: string;
    ancillary: string;
    orange: string;
    gold: string;
    green: string;
    seafoam: string;
    purple: string;
    ultraviolet: string;
    lightest: string;
    lighter: string;
    light: string;
    mediumlight: string;
    medium: string;
    mediumdark: string;
    dark: string;
    darker: string;
    darkest: string;
    border: string;
    positive: string;
    negative: string;
    warning: string;
    critical: string;
    defaultText: string;
    inverseText: string;
    positiveText: string;
    negativeText: string;
    warningText: string;
};
declare const background: {
    app: string;
    bar: string;
    content: string;
    preview: string;
    gridCellSize: number;
    hoverable: string;
    positive: string;
    negative: string;
    warning: string;
    critical: string;
};
declare const typography: {
    weight: {
        regular: TextStyle["fontWeight"];
        bold: TextStyle["fontWeight"];
    };
    size: {
        s1: number;
        s2: number;
        s3: number;
        m1: number;
        m2: number;
        m3: number;
        l1: number;
        l2: number;
        l3: number;
        code: number;
    };
};
type Color = typeof color;
type Background = typeof background;
type Typography = typeof typography;
interface Brand {
    title?: string | undefined;
    url?: string | null | undefined;
    image?: ImageSourcePropType | ReactElement | null | undefined;
    resizeMode?: ImageProps['resizeMode'] | null | undefined;
    target?: string | null | undefined;
}
interface StorybookThemeWeb {
    base: 'light' | 'dark';
    color: Color;
    background: Background;
    typography: Typography;
    textMutedColor: string;
    input: {
        border: string;
        background: string;
        color: string;
        borderRadius: number;
        paddingHorizontal: number;
        paddingVertical: number;
    };
    button: {
        background: string;
        border: string;
    };
    boolean: {
        background: string;
        selectedBackground: string;
    };
    layoutMargin: number;
    appBorderColor: string;
    appBorderRadius: number;
    barTextColor: string;
    barHoverColor: string;
    barSelectedColor: string;
    barBg: string;
    brand?: Brand;
}

type StorybookTheme = StorybookThemeWeb;
declare const theme: StorybookThemeWeb;
declare const darkTheme: StorybookThemeWeb;

type IsPreReact19 = 2 extends Parameters<React.FunctionComponent<any>>['length']
  ? true
  : false

// unpack all here to avoid infinite self-referencing when defining our own JSX namespace for the pre-React 19 case
type ReactJSXElement = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.Element
  : /** @ts-ignore */
    React.JSX.Element
type ReactJSXElementClass = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.ElementClass
  : /** @ts-ignore */
    React.JSX.ElementClass
type ReactJSXElementAttributesProperty = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.ElementAttributesProperty
  : /** @ts-ignore */
    React.JSX.ElementAttributesProperty
type ReactJSXElementChildrenAttribute = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.ElementChildrenAttribute
  : /** @ts-ignore */
    React.JSX.ElementChildrenAttribute
type ReactJSXLibraryManagedAttributes<C, P> = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.LibraryManagedAttributes<C, P>
  : /** @ts-ignore */
    React.JSX.LibraryManagedAttributes<C, P>
type ReactJSXIntrinsicAttributes = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.IntrinsicAttributes
  : /** @ts-ignore */
    React.JSX.IntrinsicAttributes
type ReactJSXIntrinsicClassAttributes<T> = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.IntrinsicClassAttributes<T>
  : /** @ts-ignore */
    React.JSX.IntrinsicClassAttributes<T>
type ReactJSXIntrinsicElements = true extends IsPreReact19
  ? /** @ts-ignore */
    JSX.IntrinsicElements
  : /** @ts-ignore */
    React.JSX.IntrinsicElements

type ReactJSXElementType = true extends IsPreReact19
  ? // based on the code from @types/react@18.2.8
    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/3197efc097d522c4bf02b94e1a0766d007d6cdeb/types/react/index.d.ts#LL3204C13-L3204C13
    string | React.JSXElementConstructor<any>
  : /** @ts-ignore */
    React.JSX.ElementType

declare namespace ReactJSX {
  type ElementType = ReactJSXElementType
  interface Element extends ReactJSXElement {}
  interface ElementClass extends ReactJSXElementClass {}
  interface ElementAttributesProperty
    extends ReactJSXElementAttributesProperty {}
  interface ElementChildrenAttribute extends ReactJSXElementChildrenAttribute {}

  type LibraryManagedAttributes<C, P> = ReactJSXLibraryManagedAttributes<C, P>

  interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes {}
  interface IntrinsicClassAttributes<T>
    extends ReactJSXIntrinsicClassAttributes<T> {}

  type IntrinsicElements = ReactJSXIntrinsicElements
}

/**
 * @desc Utility type for getting props type of React component.
 * It takes `defaultProps` into an account - making props with defaults optional.
 */
type PropsOf<
  C extends keyof ReactJSX.IntrinsicElements | React.JSXElementConstructor<any>
> = ReactJSX.LibraryManagedAttributes<C, React.ComponentProps<C>>

// We need to use this version of Omit as it's distributive (Will preserve unions)
type DistributiveOmit<T, U> = T extends any
  ? Pick<T, Exclude<keyof T, U>>
  : never

// Definitions by: Junyoung Clare Jang <https://github.com/Ailrun>
// TypeScript Version: 3.1



interface ThemeProviderProps {
  theme: Partial<Theme> | ((outerTheme: Theme) => Theme)
  children: React$1.ReactNode
}

declare function useTheme(): Theme

interface ThemeProvider {
  (props: ThemeProviderProps): React$1.ReactElement
}

declare const ThemeProvider: ThemeProvider

type withTheme = <
  C extends React$1.ComponentType<React$1.ComponentProps<C>>
>(
  component: C
) => React$1.FC<DistributiveOmit<PropsOf<C>, 'theme'> & { theme?: Theme }>

declare const withTheme: withTheme

// Definitions by: Junyoung Clare Jang <https://github.com/Ailrun>
// TypeScript Version: 3.4



// tslint:disable-next-line: no-empty-interface
export interface Theme extends StorybookTheme {}

// Definitions by: Pat Sissons <https://github.com/patsissons>
// TypeScript Version: 3.4



type ReactNativeStyle = RN.ViewStyle | RN.TextStyle | RN.ImageStyle

type ReactNativeStyleType<Props> = Props extends {
  style?: RN.StyleProp<infer StyleType>
}
  ? StyleType extends ReactNativeStyle
    ? StyleType
    : ReactNativeStyle
  : ReactNativeStyle

type InterpolationPrimitive<
  StyleType extends ReactNativeStyle = ReactNativeStyle
> =
  | null
  | undefined
  | boolean
  | number
  | string
  | ObjectInterpolation<StyleType>

type ObjectInterpolation<
  StyleType extends ReactNativeStyle = ReactNativeStyle
> = StyleType

interface ArrayInterpolation<
  MergedProps,
  StyleType extends ReactNativeStyle = ReactNativeStyle
> extends Array<Interpolation<MergedProps, StyleType>> {}

interface FunctionInterpolation<
  MergedProps,
  StyleType extends ReactNativeStyle = ReactNativeStyle
> {
  (mergedProps: MergedProps): Interpolation<MergedProps, StyleType>
}

type Interpolation<
  MergedProps = unknown,
  StyleType extends ReactNativeStyle = ReactNativeStyle
> =
  | InterpolationPrimitive<StyleType>
  | ArrayInterpolation<MergedProps, StyleType>
  | FunctionInterpolation<MergedProps, StyleType>

/** Same as StyledOptions but shouldForwardProp must be a type guard */
interface FilteringStyledOptions<
  Props = Record<string, any>,
  ForwardedProps extends keyof Props & string = keyof Props & string
> {
  shouldForwardProp?: (propName: string) => propName is ForwardedProps
}

interface StyledOptions<Props = Record<string, any>> {
  shouldForwardProp?: (propName: string) => boolean
}

/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
interface StyledComponent<
  ComponentProps extends {},
  SpecificComponentProps extends {} = {},
  JSXProps extends {} = {}
> extends React.FC<ComponentProps & SpecificComponentProps & JSXProps> {
  withComponent<C extends React.ComponentClass<React.ComponentProps<C>>>(
    component: C
  ): StyledComponent<
    ComponentProps & React.ComponentProps<C>,
    {},
    { ref?: React.Ref<InstanceType<C>> }
  >
  withComponent<C extends React.ComponentType<React.ComponentProps<C>>>(
    component: C
  ): StyledComponent<ComponentProps & React.ComponentProps<C>>
}

/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
interface CreateStyledComponent<
  ComponentProps extends {},
  SpecificComponentProps extends {} = {},
  JSXProps extends {} = {},
  StyleType extends ReactNativeStyle = ReactNativeStyle
> {
  /**
   * @typeparam AdditionalProps  Additional props to add to your styled component
   */
  <AdditionalProps extends {} = {}>(
    ...styles: ArrayInterpolation<
      ComponentProps &
        SpecificComponentProps &
        AdditionalProps & { theme: Theme },
      StyleType
    >
  ): StyledComponent<
    ComponentProps & AdditionalProps,
    SpecificComponentProps,
    JSXProps
  >
  /**
   * @typeparam AdditionalProps  Additional props to add to your styled component
   */
  <AdditionalProps extends {} = {}>(
    template: TemplateStringsArray,
    ...styles: ArrayInterpolation<
      ComponentProps &
        SpecificComponentProps &
        AdditionalProps & { theme: Theme },
      StyleType
    >
  ): StyledComponent<
    ComponentProps & AdditionalProps,
    SpecificComponentProps,
    JSXProps
  >
}

/**
 * @desc
 * This function accepts a React component.
 *
 * @example styled(MyComponent)({ width: 100 })
 * @example styled(MyComponent)(myComponentProps => ({ width: myComponentProps.width })
 * @example styled(View)({ width: 100 })
 * @example styled(View)<Props>(props => ({ width: props.width })
 */
interface CreateStyled$1 {
  <
    C extends React.ComponentClass<React.ComponentProps<C>>,
    ForwardedProps extends keyof React.ComponentProps<C> &
      string = keyof React.ComponentProps<C> & string
  >(
    component: C,
    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>
  ): CreateStyledComponent<
    Pick<React.ComponentProps<C>, ForwardedProps> & {
      theme?: Theme
      as?: React.ElementType
    },
    {},
    { ref?: React.Ref<InstanceType<C>> },
    ReactNativeStyleType<React.ComponentProps<C>>
  >

  <C extends React.ComponentClass<React.ComponentProps<C>>>(
    component: C,
    options?: StyledOptions<React.ComponentProps<C>>
  ): CreateStyledComponent<
    React.ComponentProps<C> & {
      theme?: Theme
      as?: React.ElementType
    },
    {},
    { ref?: React.Ref<InstanceType<C>> },
    ReactNativeStyleType<React.ComponentProps<C>>
  >

  <
    C extends React.ComponentType<React.ComponentProps<C>>,
    ForwardedProps extends keyof React.ComponentProps<C> &
      string = keyof React.ComponentProps<C> & string
  >(
    component: C,
    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>
  ): CreateStyledComponent<
    Pick<React.ComponentProps<C>, ForwardedProps> & {
      theme?: Theme
      as?: React.ElementType
    },
    {},
    {},
    ReactNativeStyleType<React.ComponentProps<C>>
  >

  <C extends React.ComponentType<React.ComponentProps<C>>>(
    component: C,
    options?: StyledOptions<React.ComponentProps<C>>
  ): CreateStyledComponent<
    React.ComponentProps<C> & { theme?: Theme; as?: React.ElementType },
    {},
    {},
    ReactNativeStyleType<React.ComponentProps<C>>
  >
}

// Definitions by: Pat Sissons <https://github.com/patsissons>
// TypeScript Version: 3.4



type ReactNative = typeof RN

// those 2 are just copies of the `BaseCreateStyled` with supplied `C` type argument
type HostClassComponent<C extends React.ComponentClass<any>> =
  CreateStyledComponent<
    React.ComponentProps<C> & { theme?: Theme; as?: React.ElementType },
    {},
    { ref?: React.Ref<InstanceType<C>> },
    ReactNativeStyleType<React.ComponentProps<C>>
  >
type HostFunctionComponent<C extends React.FunctionComponent<any>> =
  CreateStyledComponent<
    React.ComponentProps<C> & { theme?: Theme; as?: React.ElementType },
    {},
    {},
    ReactNativeStyleType<React.ComponentProps<C>>
  >

interface StyledComponents {
  ActivityIndicator: HostClassComponent<ReactNative['ActivityIndicator']>
  Button: HostClassComponent<ReactNative['Button']>
  DatePickerIOS: HostClassComponent<ReactNative['DatePickerIOS']>
  DrawerLayoutAndroid: HostClassComponent<ReactNative['DrawerLayoutAndroid']>
  FlatList: HostClassComponent<ReactNative['FlatList']>
  Image: HostClassComponent<ReactNative['Image']>
  ImageBackground: HostClassComponent<ReactNative['ImageBackground']>
  KeyboardAvoidingView: HostClassComponent<ReactNative['KeyboardAvoidingView']>
  ListView: HostClassComponent<ReactNative['ListView']>
  Modal: HostClassComponent<ReactNative['Modal']>
  NavigatorIOS: HostClassComponent<ReactNative['NavigatorIOS']>
  Picker: HostClassComponent<ReactNative['Picker']>
  PickerIOS: HostClassComponent<ReactNative['PickerIOS']>
  Pressable: HostFunctionComponent<ReactNative['Pressable']>
  ProgressBarAndroid: HostClassComponent<ReactNative['ProgressBarAndroid']>
  ProgressViewIOS: HostClassComponent<ReactNative['ProgressViewIOS']>
  RecyclerViewBackedScrollView: HostClassComponent<
    ReactNative['RecyclerViewBackedScrollView']
  >
  RefreshControl: HostClassComponent<ReactNative['RefreshControl']>
  SafeAreaView: HostClassComponent<ReactNative['SafeAreaView']>
  ScrollView: HostClassComponent<ReactNative['ScrollView']>
  SectionList: HostClassComponent<ReactNative['SectionList']>
  SegmentedControlIOS: HostClassComponent<ReactNative['SegmentedControlIOS']>
  Slider: HostClassComponent<ReactNative['Slider']>
  SnapshotViewIOS: HostClassComponent<ReactNative['SnapshotViewIOS']>
  StatusBar: HostClassComponent<ReactNative['StatusBar']>
  SwipeableListView: HostClassComponent<ReactNative['SwipeableListView']>
  Switch: HostClassComponent<ReactNative['Switch']>
  SwitchIOS: HostClassComponent<ReactNative['SwitchIOS']>
  TabBarIOS: HostClassComponent<ReactNative['TabBarIOS']>
  Text: HostClassComponent<ReactNative['Text']>
  TextInput: HostClassComponent<ReactNative['TextInput']>
  ToolbarAndroid: HostClassComponent<ReactNative['ToolbarAndroid']>
  TouchableHighlight: HostClassComponent<ReactNative['TouchableHighlight']>
  TouchableNativeFeedback: HostClassComponent<
    ReactNative['TouchableNativeFeedback']
  >
  TouchableOpacity: HostClassComponent<ReactNative['TouchableOpacity']>
  TouchableWithoutFeedback: HostClassComponent<
    ReactNative['TouchableWithoutFeedback']
  >
  View: HostClassComponent<ReactNative['View']>
  ViewPagerAndroid: HostClassComponent<ReactNative['ViewPagerAndroid']>
}

interface CreateStyled extends CreateStyled$1, StyledComponents {}

declare const styled: CreateStyled

export { StorybookTheme, StyledComponent, ThemeProvider, darkTheme, styled, theme, useTheme, withTheme };

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf,
  __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
    value: mod,
    enumerable: !0
  }) : target, mod)),
  __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
    value: !0
  }), mod);
var StateSafePureComponent_exports = {};
__export(StateSafePureComponent_exports, {
  default: () => StateSafePureComponent
});
module.exports = __toCommonJS(StateSafePureComponent_exports);
var import_react_native_web_internals = require("@tamagui/react-native-web-internals"),
  import_react = __toESM(require("react"));
class StateSafePureComponent extends import_react.default.PureComponent {
  _inAsyncStateUpdate = !1;
  constructor(props) {
    super(props), this._installSetStateHooks();
  }
  setState(partialState, callback) {
    typeof partialState == "function" ? super.setState((state, props) => {
      this._inAsyncStateUpdate = !0;
      let ret;
      try {
        ret = partialState(state, props);
      } catch (err) {
        throw err;
      } finally {
        this._inAsyncStateUpdate = !1;
      }
      return ret;
    }, callback) : super.setState(partialState, callback);
  }
  _installSetStateHooks() {
    const that = this;
    let {
      props,
      state
    } = this;
    Object.defineProperty(this, "props", {
      get() {
        return (0, import_react_native_web_internals.invariant)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates'), props;
      },
      set(newProps) {
        props = newProps;
      }
    }), Object.defineProperty(this, "state", {
      get() {
        return (0, import_react_native_web_internals.invariant)(!that._inAsyncStateUpdate, '"this.state" should not be accessed during state updates'), state;
      },
      set(newState) {
        state = newState;
      }
    });
  }
}
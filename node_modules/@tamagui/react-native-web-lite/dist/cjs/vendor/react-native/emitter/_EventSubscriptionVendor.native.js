"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var EventSubscriptionVendor_exports = {};
__export(EventSubscriptionVendor_exports, {
  default: () => EventSubscriptionVendor_default
});
module.exports = __toCommonJS(EventSubscriptionVendor_exports);
var import_react_native_web_internals = require("@tamagui/react-native-web-internals");
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
var EventSubscriptionVendor = /* @__PURE__ */ function() {
  function EventSubscriptionVendor2() {
    _class_call_check(this, EventSubscriptionVendor2), this._subscriptionsForType = {};
  }
  return _create_class(EventSubscriptionVendor2, [
    {
      /**
      * Adds a subscription keyed by an event type.
      *
      * @param {string} eventType
      * @param {EventSubscription} subscription
      */
      key: "addSubscription",
      value: function(eventType, subscription) {
        (0, import_react_native_web_internals.invariant)(subscription.subscriber === this, "The subscriber of the subscription is incorrectly set."), this._subscriptionsForType[eventType] || (this._subscriptionsForType[eventType] = []);
        var key = this._subscriptionsForType[eventType].length;
        return this._subscriptionsForType[eventType].push(subscription), subscription.eventType = eventType, subscription.key = key, subscription;
      }
    },
    {
      /**
      * Removes a bulk set of the subscriptions.
      *
      * @param {?string} eventType - Optional name of the event type whose
      *   registered supscriptions to remove, if null remove all subscriptions.
      */
      key: "removeAllSubscriptions",
      value: function(eventType) {
        eventType == null ? this._subscriptionsForType = {} : delete this._subscriptionsForType[eventType];
      }
    },
    {
      /**
      * Removes a specific subscription. Instead of calling this function, call
      * `subscription.remove()` directly.
      *
      * @param {object} subscription
      */
      key: "removeSubscription",
      value: function(subscription) {
        var eventType = subscription.eventType, key = subscription.key, subscriptionsForType = this._subscriptionsForType[eventType];
        subscriptionsForType && delete subscriptionsForType[key];
      }
    },
    {
      /**
      * Returns the array of subscriptions that are currently registered for the
      * given event type.
      *
      * Note: This array can be potentially sparse as subscriptions are deleted
      * from it when they are removed.
      *
      * TODO: This returns a nullable array. wat?
      *
      * @param {string} eventType
      * @returns {?array}
      */
      key: "getSubscriptionsForType",
      value: function(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }
  ]), EventSubscriptionVendor2;
}(), EventSubscriptionVendor_default = EventSubscriptionVendor;
//# sourceMappingURL=_EventSubscriptionVendor.js.map

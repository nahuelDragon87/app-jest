var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: !0
}), mod);
var deepDiffer_exports = {};
__export(deepDiffer_exports, {
  default: () => deepDiffer_default
});
module.exports = __toCommonJS(deepDiffer_exports);
const deepDiffer = function deepDiffer2(one, two, maxDepth = -1) {
  if (maxDepth === 0) return !0;
  if (one === two || typeof one == "function" && typeof two == "function") return !1;
  if (typeof one != "object" || one === null) return one !== two;
  if (typeof two != "object" || two === null || one.constructor !== two.constructor) return !0;
  if (Array.isArray(one)) {
    const len = one.length;
    if (two.length !== len) return !0;
    for (let ii = 0; ii < len; ii++) if (deepDiffer2(one[ii], two[ii], maxDepth - 1)) return !0;
  } else {
    for (const key in one) if (deepDiffer2(one[key], two[key], maxDepth - 1)) return !0;
    for (const twoKey in two) if (one[twoKey] === void 0 && two[twoKey] !== void 0) return !0;
  }
  return !1;
};
var deepDiffer_default = deepDiffer;
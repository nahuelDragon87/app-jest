"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var SpringAnimation_exports = {};
__export(SpringAnimation_exports, {
  default: () => SpringAnimation_default
});
module.exports = __toCommonJS(SpringAnimation_exports);
var import_react_native_web_internals = require("@tamagui/react-native-web-internals"), import_NativeAnimatedHelper = require("../NativeAnimatedHelper"), import_SpringConfig = __toESM(require("../SpringConfig")), import_Animation = __toESM(require("./Animation"));
function _assert_this_initialized(self) {
  if (self === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return self;
}
function _call_super(_this, derived, args) {
  return derived = _get_prototype_of(derived), _possible_constructor_return(_this, _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args));
}
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _construct(Parent, args, Class) {
  return _is_native_reflect_construct() ? _construct = Reflect.construct : _construct = function(Parent2, args2, Class2) {
    var a = [
      null
    ];
    a.push.apply(a, args2);
    var Constructor = Function.bind.apply(Parent2, a), instance = new Constructor();
    return Class2 && _set_prototype_of(instance, Class2.prototype), instance;
  }, _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
function _get(target, property, receiver) {
  return typeof Reflect < "u" && Reflect.get ? _get = Reflect.get : _get = function(target2, property2, receiver2) {
    var base = _super_prop_base(target2, property2);
    if (base) {
      var desc = Object.getOwnPropertyDescriptor(base, property2);
      return desc.get ? desc.get.call(receiver2 || target2) : desc.value;
    }
  }, _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
  return _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  }, _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
  if (typeof superClass != "function" && superClass !== null)
    throw new TypeError("Super expression must either be null or a function");
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: !0,
      configurable: !0
    }
  }), superClass && _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _possible_constructor_return(self, call) {
  return call && (_type_of(call) === "object" || typeof call == "function") ? call : _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
  return _set_prototype_of = Object.setPrototypeOf || function(o2, p2) {
    return o2.__proto__ = p2, o2;
  }, _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
  for (; !Object.prototype.hasOwnProperty.call(object, property) && (object = _get_prototype_of(object), object !== null); )
    ;
  return object;
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _wrap_native_super(Class) {
  var _cache = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return _wrap_native_super = function(Class2) {
    if (Class2 === null || !_is_native_function(Class2)) return Class2;
    if (typeof Class2 != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof _cache < "u") {
      if (_cache.has(Class2)) return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _get_prototype_of(this).constructor);
    }
    return Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _set_prototype_of(Wrapper, Class2);
  }, _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
  try {
    var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch {
  }
  return (_is_native_reflect_construct = function() {
    return !!result;
  })();
}
var SpringAnimation = /* @__PURE__ */ function(Animation2) {
  _inherits(SpringAnimation2, Animation2);
  function SpringAnimation2(config) {
    _class_call_check(this, SpringAnimation2);
    var _this, _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;
    if (_this = _call_super(this, SpringAnimation2), _this._overshootClamping = (_config$overshootClam = config.overshootClamping) !== null && _config$overshootClam !== void 0 ? _config$overshootClam : !1, _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) !== null && _config$restDisplacem !== void 0 ? _config$restDisplacem : 1e-3, _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) !== null && _config$restSpeedThre !== void 0 ? _config$restSpeedThre : 1e-3, _this._initialVelocity = (_config$velocity = config.velocity) !== null && _config$velocity !== void 0 ? _config$velocity : 0, _this._lastVelocity = (_config$velocity2 = config.velocity) !== null && _config$velocity2 !== void 0 ? _config$velocity2 : 0, _this._toValue = config.toValue, _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0, _this._useNativeDriver = (0, import_NativeAnimatedHelper.shouldUseNativeDriver)(config), _this._platformConfig = config.platformConfig, _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver, _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1, config.stiffness !== void 0 || config.damping !== void 0 || config.mass !== void 0) {
      var _config$stiffness, _config$damping, _config$mass;
      (0, import_react_native_web_internals.invariant)(config.bounciness === void 0 && config.speed === void 0 && config.tension === void 0 && config.friction === void 0, "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one"), _this._stiffness = (_config$stiffness = config.stiffness) !== null && _config$stiffness !== void 0 ? _config$stiffness : 100, _this._damping = (_config$damping = config.damping) !== null && _config$damping !== void 0 ? _config$damping : 10, _this._mass = (_config$mass = config.mass) !== null && _config$mass !== void 0 ? _config$mass : 1;
    } else if (config.bounciness !== void 0 || config.speed !== void 0) {
      var _config$bounciness, _config$speed;
      (0, import_react_native_web_internals.invariant)(config.tension === void 0 && config.friction === void 0 && config.stiffness === void 0 && config.damping === void 0 && config.mass === void 0, "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one");
      var springConfig = import_SpringConfig.default.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) !== null && _config$bounciness !== void 0 ? _config$bounciness : 8, (_config$speed = config.speed) !== null && _config$speed !== void 0 ? _config$speed : 12);
      _this._stiffness = springConfig.stiffness, _this._damping = springConfig.damping, _this._mass = 1;
    } else {
      var _config$tension, _config$friction, _springConfig = import_SpringConfig.default.fromOrigamiTensionAndFriction((_config$tension = config.tension) !== null && _config$tension !== void 0 ? _config$tension : 40, (_config$friction = config.friction) !== null && _config$friction !== void 0 ? _config$friction : 7);
      _this._stiffness = _springConfig.stiffness, _this._damping = _springConfig.damping, _this._mass = 1;
    }
    return (0, import_react_native_web_internals.invariant)(_this._stiffness > 0, "Stiffness value must be greater than 0"), (0, import_react_native_web_internals.invariant)(_this._damping > 0, "Damping value must be greater than 0"), (0, import_react_native_web_internals.invariant)(_this._mass > 0, "Mass value must be greater than 0"), _this;
  }
  return _create_class(SpringAnimation2, [
    {
      key: "__getNativeAnimationConfig",
      value: function() {
        var _this$_initialVelocit;
        return {
          type: "spring",
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: (_this$_initialVelocit = this._initialVelocity) !== null && _this$_initialVelocit !== void 0 ? _this$_initialVelocit : this._lastVelocity,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    },
    {
      key: "start",
      value: function(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this = this;
        if (this.__active = !0, this._startPosition = fromValue, this._lastPosition = this._startPosition, this._onUpdate = onUpdate, this.__onEnd = onEnd, this._lastTime = Date.now(), this._frameTime = 0, previousAnimation instanceof SpringAnimation2) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition, this._lastVelocity = internalState.lastVelocity, this._initialVelocity = this._lastVelocity, this._lastTime = internalState.lastTime;
        }
        var start2 = function() {
          _this._useNativeDriver ? _this.__startNativeAnimation(animatedValue) : _this.onUpdate();
        };
        this._delay ? this._timeout = setTimeout(start2, this._delay) : start2();
      }
    },
    {
      key: "getInternalState",
      value: function() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    },
    {
      /**
      * This spring model is based off of a damped harmonic oscillator
      * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
      *
      * We use the closed form of the second order differential equation:
      *
      * x'' + (2ζ⍵_0)x' + ⍵^2x = 0
      *
      * where
      *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),
      *    ζ = c / 2√mk (damping ratio),
      *    c = damping constant
      *    k = stiffness
      *    m = mass
      *
      * The derivation of the closed form is described in detail here:
      * http://planetmath.org/sites/default/files/texpdf/39745.pdf
      *
      * This algorithm happens to match the algorithm used by CASpringAnimation,
      * a QuartzCore (iOS) API that creates spring animations.
      */
      key: "onUpdate",
      value: function() {
        var MAX_STEPS = 64, now = Date.now();
        now > this._lastTime + MAX_STEPS && (now = this._lastTime + MAX_STEPS);
        var deltaTime = (now - this._lastTime) / 1e3;
        this._frameTime += deltaTime;
        var c = this._damping, m = this._mass, k = this._stiffness, v0 = -this._initialVelocity, zeta = c / (2 * Math.sqrt(k * m)), omega0 = Math.sqrt(k / m), omega1 = omega0 * Math.sqrt(1 - zeta * zeta), x0 = this._toValue - this._startPosition, position = 0, velocity = 0, t = this._frameTime;
        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t)), velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);
          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t), velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }
        if (this._lastTime = now, this._lastPosition = position, this._lastVelocity = velocity, this._onUpdate(position), !!this.__active) {
          var isOvershooting = !1;
          this._overshootClamping && this._stiffness !== 0 && (this._startPosition < this._toValue ? isOvershooting = position > this._toValue : isOvershooting = position < this._toValue);
          var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold, isDisplacement = !0;
          if (this._stiffness !== 0 && (isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold), isOvershooting || isVelocity && isDisplacement) {
            this._stiffness !== 0 && (this._lastPosition = this._toValue, this._lastVelocity = 0, this._onUpdate(this._toValue)), this.__debouncedOnEnd({
              finished: !0
            });
            return;
          }
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    },
    {
      key: "stop",
      value: function() {
        _get(_get_prototype_of(SpringAnimation2.prototype), "stop", this).call(this), this.__active = !1, clearTimeout(this._timeout), global.cancelAnimationFrame(this._animationFrame), this.__debouncedOnEnd({
          finished: !1
        });
      }
    }
  ]), SpringAnimation2;
}(_wrap_native_super(import_Animation.default)), SpringAnimation_default = SpringAnimation;
//# sourceMappingURL=SpringAnimation.js.map

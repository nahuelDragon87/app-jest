import { invariant } from "@tamagui/react-native-web-internals";
import { Platform } from "@tamagui/react-native-web-internals";
import RCTDeviceEventEmitter from "./RCTDeviceEventEmitter";
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
var NativeEventEmitter = /* @__PURE__ */ function() {
  function NativeEventEmitter2(nativeModule) {
    _class_call_check(this, NativeEventEmitter2), Platform.OS === "ios" && (invariant(nativeModule != null, "`new NativeEventEmitter()` requires a non-null argument."), this._nativeModule = nativeModule);
  }
  return _create_class(NativeEventEmitter2, [
    {
      key: "addListener",
      value: function(eventType, listener, context) {
        var _this = this, _this$_nativeModule;
        (_this$_nativeModule = this._nativeModule) == null || _this$_nativeModule.addListener(eventType);
        var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);
        return {
          remove: function() {
            if (subscription != null) {
              var _this$_nativeModule2;
              (_this$_nativeModule2 = _this._nativeModule) == null || _this$_nativeModule2.removeListeners(1), subscription.remove(), subscription = null;
            }
          }
        };
      }
    },
    {
      /**
      * @deprecated Use `remove` on the EventSubscription from `addListener`.
      */
      key: "removeListener",
      value: function(eventType, listener) {
        var _this$_nativeModule3;
        (_this$_nativeModule3 = this._nativeModule) == null || _this$_nativeModule3.removeListeners(1), RCTDeviceEventEmitter.removeListener(eventType, listener);
      }
    },
    {
      key: "emit",
      value: function(eventType) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          args[_key - 1] = arguments[_key];
        RCTDeviceEventEmitter.emit(eventType, ...args);
      }
    },
    {
      key: "removeAllListeners",
      value: function(eventType) {
        var _this$_nativeModule4;
        invariant(eventType != null, "`NativeEventEmitter.removeAllListener()` requires a non-null argument."), (_this$_nativeModule4 = this._nativeModule) == null || _this$_nativeModule4.removeListeners(this.listenerCount(eventType)), RCTDeviceEventEmitter.removeAllListeners(eventType);
      }
    },
    {
      key: "listenerCount",
      value: function(eventType) {
        return RCTDeviceEventEmitter.listenerCount(eventType);
      }
    }
  ]), NativeEventEmitter2;
}();
export {
  NativeEventEmitter as default
};
//# sourceMappingURL=index.js.map

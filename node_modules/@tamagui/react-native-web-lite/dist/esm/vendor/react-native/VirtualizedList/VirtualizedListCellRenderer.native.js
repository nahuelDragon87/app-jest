import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { invariant, StyleSheet } from "@tamagui/react-native-web-internals";
import React from "react";
import { VirtualizedListCellContextProvider } from "./VirtualizedListContext";
import View from "../../../View";
function _assert_this_initialized(self) {
  if (self === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return self;
}
function _call_super(_this, derived, args) {
  return derived = _get_prototype_of(derived), _possible_constructor_return(_this, _is_native_reflect_construct() ? Reflect.construct(derived, args || [], _get_prototype_of(_this).constructor) : derived.apply(_this, args));
}
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _get_prototype_of(o) {
  return _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  }, _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
  if (typeof superClass != "function" && superClass !== null)
    throw new TypeError("Super expression must either be null or a function");
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: !0,
      configurable: !0
    }
  }), superClass && _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
  return call && (_type_of(call) === "object" || typeof call == "function") ? call : _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
  return _set_prototype_of = Object.setPrototypeOf || function(o2, p2) {
    return o2.__proto__ = p2, o2;
  }, _set_prototype_of(o, p);
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
  try {
    var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch {
  }
  return (_is_native_reflect_construct = function() {
    return !!result;
  })();
}
var CellRenderer = /* @__PURE__ */ function(_React_Component) {
  "use strict";
  _inherits(CellRenderer2, _React_Component);
  function CellRenderer2() {
    _class_call_check(this, CellRenderer2);
    var _this;
    return _this = _call_super(this, CellRenderer2, arguments), _define_property(_this, "state", {
      separatorProps: {
        highlighted: !1,
        leadingItem: _this.props.item
      }
    }), _define_property(_this, "_separators", {
      highlight: function() {
        var { cellKey, prevCellKey } = _this.props;
        _this.props.onUpdateSeparators([
          cellKey,
          prevCellKey || null
        ], {
          highlighted: !0
        });
      },
      unhighlight: function() {
        var { cellKey, prevCellKey } = _this.props;
        _this.props.onUpdateSeparators([
          cellKey,
          prevCellKey || null
        ], {
          highlighted: !1
        });
      },
      updateProps: function(select, newProps) {
        var { cellKey, prevCellKey } = _this.props;
        _this.props.onUpdateSeparators([
          select === "leading" ? prevCellKey || null : cellKey
        ], newProps);
      }
    }), _define_property(_this, "_onLayout", function(nativeEvent) {
      _this.props.onCellLayout && _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);
    }), _this;
  }
  return _create_class(CellRenderer2, [
    {
      key: "updateSeparatorProps",
      value: function(newProps) {
        this.setState(function(state) {
          return {
            separatorProps: {
              ...state.separatorProps,
              ...newProps
            }
          };
        });
      }
    },
    {
      key: "componentWillUnmount",
      value: function() {
        this.props.onUnmount(this.props.cellKey);
      }
    },
    {
      key: "_renderElement",
      value: function(renderItem, ListItemComponent, item, index) {
        if (renderItem && ListItemComponent && console.warn("VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem."), ListItemComponent)
          return /* @__PURE__ */ React.createElement(ListItemComponent, {
            item,
            index,
            separators: this._separators
          });
        if (renderItem)
          return renderItem({
            item,
            index,
            separators: this._separators
          });
        invariant(!1, "VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.");
      }
    },
    {
      key: "render",
      value: function() {
        var { CellRendererComponent, ItemSeparatorComponent, ListItemComponent, cellKey, horizontal, item, index, inversionStyle, onCellFocusCapture, onCellLayout, renderItem } = this.props, element = this._renderElement(renderItem, ListItemComponent, item, index), itemSeparator = /* @__PURE__ */ React.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && /* @__PURE__ */ _jsx(ItemSeparatorComponent, {
          ...this.state.separatorProps
        }), cellStyle = inversionStyle ? horizontal ? [
          styles.rowReverse,
          inversionStyle
        ] : [
          styles.columnReverse,
          inversionStyle
        ] : horizontal ? [
          styles.row,
          inversionStyle
        ] : inversionStyle, result = CellRendererComponent ? /* @__PURE__ */ _jsxs(CellRendererComponent, {
          cellKey,
          index,
          item,
          style: cellStyle,
          onFocusCapture: onCellFocusCapture,
          ...onCellLayout && {
            onLayout: this._onLayout
          },
          children: [
            element,
            itemSeparator
          ]
        }) : /* @__PURE__ */ _jsxs(View, {
          style: cellStyle,
          // @ts-ignore
          onFocusCapture: onCellFocusCapture,
          ...onCellLayout && {
            onLayout: this._onLayout
          },
          children: [
            element,
            itemSeparator
          ]
        });
        return /* @__PURE__ */ _jsx(VirtualizedListCellContextProvider, {
          cellKey: this.props.cellKey,
          children: result
        });
      }
    }
  ], [
    {
      key: "getDerivedStateFromProps",
      value: function(props, prevState) {
        return {
          separatorProps: {
            ...prevState.separatorProps,
            leadingItem: props.item
          }
        };
      }
    }
  ]), CellRenderer2;
}(React.Component);
var styles = StyleSheet.create({
  row: {
    flexDirection: "row"
  },
  rowReverse: {
    flexDirection: "row-reverse"
  },
  columnReverse: {
    flexDirection: "column-reverse"
  }
});
export {
  CellRenderer as default
};
//# sourceMappingURL=VirtualizedListCellRenderer.js.map

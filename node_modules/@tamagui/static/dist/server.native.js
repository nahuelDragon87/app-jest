"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var server_exports = {};
__export(server_exports, {
  startServer: () => startServer
});
module.exports = __toCommonJS(server_exports);
var import_node_net = __toESM(require("node:net"));
async function startServer(options) {
  var port = await getAvailablePort(), server = import_node_net.default.createServer();
  server.unref(), await new Promise(function(resolve, reject) {
    server.on("error", reject), server.on("connection", function(conn) {
      conn.on("data", function(data) {
        console.info("got", data.toString());
      });
    }), server.listen({
      port
    }, function() {
      var { port: port2 } = server.address();
      server.close(function() {
        resolve(port2);
      });
    });
  });
}
async function getAvailablePort() {
  var port = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8089;
  return checkAvailablePort(port).catch(function() {
    return getAvailablePort(port + 1);
  });
}
function checkAvailablePort(port) {
  return new Promise(function(resolve, reject) {
    var server = import_node_net.default.createServer();
    server.unref(), server.on("error", reject), server.listen({
      port
    }, function() {
      var { port: _$port } = server.address();
      server.close(function() {
        resolve(_$port);
      });
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  startServer
});
//# sourceMappingURL=server.js.map

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var esbuildTsconfigPaths_exports = {};
__export(esbuildTsconfigPaths_exports, {
  TsconfigPathsPlugin: () => TsconfigPathsPlugin
});
module.exports = __toCommonJS(esbuildTsconfigPaths_exports);
var import_node_fs = __toESM(require("node:fs")), import_node_path = __toESM(require("node:path")), import_typescript = require("typescript");
const name = "tsconfig-paths";
function TsconfigPathsPlugin() {
  const compilerOptions = loadCompilerOptionsFromTsconfig();
  return {
    name,
    setup({ onResolve }) {
      onResolve({ filter: /.*/ }, (args) => {
        const paths = compilerOptions.paths || {};
        if (!Object.keys(paths).some(
          (p) => new RegExp(p.replace("*", "\\w*")).test(args.path)
        ))
          return null;
        const { resolvedModule } = (0, import_typescript.nodeModuleNameResolver)(
          args.path,
          args.importer,
          compilerOptions,
          import_typescript.sys
        );
        if (!resolvedModule)
          return null;
        const { resolvedFileName } = resolvedModule;
        return !resolvedFileName || resolvedFileName.endsWith(".d.ts") ? null : {
          path: resolvedFileName
        };
      });
    }
  };
}
function loadCompilerOptionsFromTsconfig(tsconfig) {
  if (!tsconfig) {
    const configPath = (0, import_typescript.findConfigFile)(process.cwd(), import_typescript.sys.fileExists, "tsconfig.json") || (0, import_typescript.findConfigFile)(process.cwd(), import_typescript.sys.fileExists, "jsconfig.json");
    return configPath ? parseTsconfig(configPath) : {};
  }
  if (typeof tsconfig == "string") {
    if (import_node_fs.default.existsSync(tsconfig))
      return parseTsconfig(tsconfig);
    throw new Error(`Specified tsconfig file not found: ${tsconfig}`);
  }
  const baseDir = process.cwd();
  return (0, import_typescript.parseJsonConfigFileContent)(tsconfig, import_typescript.sys, baseDir).options;
}
function parseTsconfig(configFilePath) {
  const configFile = (0, import_typescript.readConfigFile)(configFilePath, import_typescript.sys.readFile);
  if (configFile.error)
    throw new Error(
      `Error reading tsconfig file '${configFilePath}': ${configFile.error.messageText}`
    );
  const baseDir = import_node_path.default.dirname(configFilePath);
  return (0, import_typescript.parseJsonConfigFileContent)(configFile.config, import_typescript.sys, baseDir).options;
}
//# sourceMappingURL=esbuildTsconfigPaths.js.map

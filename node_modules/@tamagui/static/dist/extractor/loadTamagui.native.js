"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var loadTamagui_exports = {};
__export(loadTamagui_exports, {
  esbuildWatchFiles: () => esbuildWatchFiles,
  generateThemesAndLog: () => generateThemesAndLog,
  getOptions: () => getOptions,
  loadTamagui: () => loadTamagui,
  loadTamaguiBuildConfigSync: () => loadTamaguiBuildConfigSync,
  loadTamaguiSync: () => loadTamaguiSync,
  resolveWebOrNativeSpecificEntry: () => resolveWebOrNativeSpecificEntry
});
module.exports = __toCommonJS(loadTamagui_exports);
var import_node_path = require("node:path"), import_cli_color = require("@tamagui/cli-color"), import_esbuild = __toESM(require("esbuild")), fsExtra = __toESM(require("fs-extra")), import_constants = require("../constants"), import_requireTamaguiCore = require("../helpers/requireTamaguiCore"), import_registerRequire = require("../registerRequire"), import_bundleConfig = require("./bundleConfig"), import_getTamaguiConfigPathFromOptionsConfig = require("./getTamaguiConfigPathFromOptionsConfig"), import_regenerateConfig = require("./regenerateConfig"), getFilledOptions = function(propsIn) {
  return {
    // defaults
    platform: "native",
    config: "tamagui.config.ts",
    components: [
      "tamagui"
    ],
    ...propsIn
  };
}, isLoadingPromise;
async function loadTamagui(propsIn) {
  if (isLoadingPromise) return await isLoadingPromise;
  var resolvePromise, rejectPromise;
  isLoadingPromise = new Promise(function(res, rej) {
    resolvePromise = res, rejectPromise = rej;
  });
  try {
    var props = getFilledOptions(propsIn), bundleInfo = await (0, import_bundleConfig.getBundledConfig)(props);
    return bundleInfo ? (await generateThemesAndLog(props), (0, import_bundleConfig.hasBundledConfigChanged)() ? (process.env.NODE_ENV === "development" && await (0, import_regenerateConfig.regenerateConfig)(props, bundleInfo), resolvePromise(bundleInfo), bundleInfo) : (resolvePromise(bundleInfo), bundleInfo)) : (console.warn("No bundled config generated, maybe an error in bundling. Set DEBUG=tamagui and re-run to get logs."), resolvePromise(null), null);
  } catch (err) {
    throw rejectPromise(), err;
  } finally {
    isLoadingPromise = null;
  }
}
var waiting = !1, generateThemesAndLog = async function(options) {
  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  if (!waiting && options.themeBuilder)
    try {
      waiting = !0, await new Promise(function(res) {
        return setTimeout(res, 30);
      });
      var didGenerate = await (0, import_regenerateConfig.generateTamaguiThemes)(options, force);
      if (didGenerate) {
        var whitespaceBefore = "    ";
        if ((0, import_cli_color.colorLog)(import_cli_color.Color.FgYellow, `${whitespaceBefore}\u27A1 [tamagui] generated themes: ${(0, import_node_path.relative)(process.cwd(), options.themeBuilder.output)}`), options.outputCSS) {
          var loadedConfig = (0, import_bundleConfig.getLoadedConfig)();
          loadedConfig && await (0, import_bundleConfig.writeTamaguiCSS)(options.outputCSS, loadedConfig);
        }
      }
    } finally {
      waiting = !1;
    }
}, last = {}, lastVersion = {};
function loadTamaguiBuildConfigSync(tamaguiOptions) {
  var _tamaguiOptions_buildFile, buildFilePath = (_tamaguiOptions_buildFile = tamaguiOptions == null ? void 0 : tamaguiOptions.buildFile) !== null && _tamaguiOptions_buildFile !== void 0 ? _tamaguiOptions_buildFile : "tamagui.build.ts";
  if (fsExtra.existsSync(buildFilePath)) {
    var registered = (0, import_registerRequire.registerRequire)("web");
    try {
      var out = require(buildFilePath).default;
      if (!out)
        throw new Error(`No default export found in ${buildFilePath}: ${out}`);
      tamaguiOptions = {
        ...tamaguiOptions,
        ...out
      };
    } finally {
      registered.unregister();
    }
  }
  if (!tamaguiOptions)
    throw new Error("No tamagui build options found either via input props or at tamagui.build.ts");
  return {
    config: "tamagui.config.ts",
    components: [
      "@tamagui/core"
    ],
    ...tamaguiOptions
  };
}
function loadTamaguiSync(param) {
  var { forceExports, cacheKey, ...propsIn } = param, key = JSON.stringify(propsIn);
  if (last[key] && !(0, import_bundleConfig.hasBundledConfigChanged)() && (!lastVersion[key] || lastVersion[key] === cacheKey))
    return last[key];
  lastVersion[key] = cacheKey || "";
  var props = getFilledOptions(propsIn);
  process.env.IS_STATIC = "is_static", process.env.TAMAGUI_IS_SERVER = "true";
  var { unregister } = (0, import_registerRequire.registerRequire)(props.platform || "web", {
    proxyWormImports: !!forceExports
  });
  try {
    var devValueOG = globalThis.__DEV__;
    globalThis.__DEV__ = process.env.NODE_ENV === "development";
    try {
      var tamaguiConfig = null;
      if (propsIn.config) {
        var configPath = (0, import_getTamaguiConfigPathFromOptionsConfig.getTamaguiConfigPathFromOptionsConfig)(propsIn.config), exp = require(configPath);
        if (tamaguiConfig = exp.default || exp.config || exp, !tamaguiConfig || !tamaguiConfig.parsed) {
          var confPath = require.resolve(configPath);
          throw new Error(`Can't find valid config in ${confPath}:
          
  Be sure you "export default" or "export const config" the config.`);
        }
        if (tamaguiConfig) {
          var { createTamagui } = (0, import_requireTamaguiCore.requireTamaguiCore)(props.platform || "web");
          createTamagui(tamaguiConfig);
        }
      }
      var components = (0, import_bundleConfig.loadComponents)(props, forceExports);
      if (!components)
        throw new Error("No components loaded");
      process.env.DEBUG === "tamagui" && console.info("components", components), process.env.IS_STATIC = void 0, globalThis.__DEV__ = devValueOG;
      var info = {
        components,
        tamaguiConfig,
        nameToPaths: (0, import_registerRequire.getNameToPaths)()
      };
      if (tamaguiConfig) {
        var { outputCSS } = props;
        outputCSS && (0, import_bundleConfig.writeTamaguiCSS)(outputCSS, tamaguiConfig), (0, import_regenerateConfig.regenerateConfigSync)(props, info);
      }
      return last[key] = {
        ...info,
        cached: !0
      }, info;
    } catch (err) {
      err instanceof Error ? !import_constants.SHOULD_DEBUG && !forceExports ? (console.warn("Error loading tamagui.config.ts (set DEBUG=tamagui to see full stack), running tamagui without custom config"), console.info(`

    ${err.message}

`)) : import_constants.SHOULD_DEBUG && console.error(err) : console.error("Error loading tamagui.config.ts", err);
      var { createTamagui: createTamagui1 } = (0, import_requireTamaguiCore.requireTamaguiCore)(props.platform || "web"), { getDefaultTamaguiConfig } = require("@tamagui/config-default");
      return {
        components: [],
        tamaguiConfig: createTamagui1(getDefaultTamaguiConfig()),
        nameToPaths: {}
      };
    }
  } finally {
    unregister();
  }
}
async function getOptions() {
  var { root = process.cwd(), tsconfigPath = "tsconfig.json", tamaguiOptions, host, debug } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dotDir = (0, import_node_path.join)(root, ".tamagui"), pkgJson = {};
  try {
    pkgJson = await fsExtra.readJSON((0, import_node_path.join)(root, "package.json"));
  } catch {
  }
  var _tamaguiOptions_config;
  return {
    mode: process.env.NODE_ENV === "production" ? "production" : "development",
    root,
    host: host || "127.0.0.1",
    pkgJson,
    debug,
    tsconfigPath,
    tamaguiOptions: {
      platform: "native",
      components: [
        "tamagui"
      ],
      ...tamaguiOptions,
      config: (_tamaguiOptions_config = tamaguiOptions == null ? void 0 : tamaguiOptions.config) !== null && _tamaguiOptions_config !== void 0 ? _tamaguiOptions_config : await getDefaultTamaguiConfigPath(root, tamaguiOptions == null ? void 0 : tamaguiOptions.config)
    },
    paths: {
      root,
      dotDir,
      conf: (0, import_node_path.join)(dotDir, "tamagui.config.json"),
      types: (0, import_node_path.join)(dotDir, "types.json")
    }
  };
}
function resolveWebOrNativeSpecificEntry(entry) {
  var workspaceRoot = (0, import_node_path.resolve)(), resolved = require.resolve(entry, {
    paths: [
      workspaceRoot
    ]
  }), ext = (0, import_node_path.extname)(resolved), fileName = (0, import_node_path.basename)(resolved).replace(ext, ""), specificExt = "native", specificFile = (0, import_node_path.join)((0, import_node_path.dirname)(resolved), fileName + "." + specificExt + ext);
  return fsExtra.existsSync(specificFile) ? specificFile : entry;
}
var defaultPaths = [
  "tamagui.config.ts",
  (0, import_node_path.join)("src", "tamagui.config.ts")
], hasWarnedOnce = !1;
async function getDefaultTamaguiConfigPath(root, configPath) {
  var searchPaths = [
    ...new Set([
      configPath,
      ...defaultPaths
    ].filter(Boolean).map(function(p) {
      return (0, import_node_path.join)(root, p);
    }))
  ], _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = searchPaths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var path = _step.value;
      if (await fsExtra.pathExists(path))
        return path;
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  hasWarnedOnce || (hasWarnedOnce = !0, console.warn(`Warning: couldn't find tamagui.config.ts in the following paths given configuration "${configPath}":
    ${searchPaths.join(`
  `)}
  `));
}
async function esbuildWatchFiles(entry, onChanged) {
  var hasRunOnce = !1, context = await import_esbuild.default.context({
    bundle: !0,
    entryPoints: [
      entry
    ],
    resolveExtensions: [
      ".ts",
      ".tsx",
      ".js",
      ".mjs"
    ],
    logLevel: "silent",
    write: !1,
    alias: {
      "@react-native/normalize-color": "@tamagui/proxy-worm",
      "react-native-web": "@tamagui/proxy-worm",
      "react-native": "@tamagui/proxy-worm"
    },
    plugins: [
      // to log what its watching:
      // {
      //   name: 'test',
      //   setup({ onResolve }) {
      //     onResolve({ filter: /.*/ }, (args) => {
      //       console.log('wtf', args.path)
      //     })
      //   },
      // },
      {
        name: "on-rebuild",
        setup(param) {
          var { onEnd, onResolve } = param, filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
          onResolve({
            filter
          }, function(args) {
            return {
              path: args.path,
              external: !0
            };
          }), onEnd(function() {
            hasRunOnce ? onChanged() : hasRunOnce = !0;
          });
        }
      }
    ]
  });
  return context.watch(), function() {
    context.dispose();
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  esbuildWatchFiles,
  generateThemesAndLog,
  getOptions,
  loadTamagui,
  loadTamaguiBuildConfigSync,
  loadTamaguiSync,
  resolveWebOrNativeSpecificEntry
});
//# sourceMappingURL=loadTamagui.js.map

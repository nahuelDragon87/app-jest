var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var extractToNative_exports = {};
__export(extractToNative_exports, {
  extractToNative: () => extractToNative,
  getBabelParseDefinition: () => getBabelParseDefinition,
  getBabelPlugin: () => getBabelPlugin
});
module.exports = __toCommonJS(extractToNative_exports);
var import_node_path = require("node:path"), import_core = require("@babel/core"), import_generator = __toESM(require("@babel/generator")), import_helper_plugin_utils = require("@babel/helper-plugin-utils"), import_parser = require("@babel/parser"), import_template = __toESM(require("@babel/template")), t = __toESM(require("@babel/types")), import_createExtractor = require("./createExtractor"), import_getPragmaOptions = require("../getPragmaOptions"), import_createLogger = require("./createLogger"), import_extractHelpers = require("./extractHelpers"), import_literalToAst = require("./literalToAst"), import_loadTamagui = require("./loadTamagui");
const importNativeView = (0, import_template.default)(`
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
`), importStyleSheet = (0, import_template.default)(`
const __ReactNativeStyleSheet = require('react-native').StyleSheet;
`), importWithStyle = (0, import_template.default)(`
const __withStableStyle = require('@tamagui/core')._withStableStyle;
`), extractor = (0, import_createExtractor.createExtractor)({ platform: "native" });
let tamaguiBuildOptionsLoaded;
function extractToNative(sourceFileName, sourceCode, options) {
  const ast = (0, import_parser.parse)(sourceCode, {
    sourceType: "module",
    plugins: ["jsx", "typescript"]
  }), babelPlugin = getBabelPlugin(), out = (0, import_core.transformFromAstSync)(ast, sourceCode, {
    plugins: [[babelPlugin, options]],
    configFile: !1,
    sourceFileName,
    filename: sourceFileName
  });
  if (!out)
    throw new Error("No output returned");
  return out;
}
function getBabelPlugin() {
  return (0, import_helper_plugin_utils.declare)((api, options) => (api.assertVersion(7), getBabelParseDefinition(options)));
}
function getBabelParseDefinition(options) {
  return {
    name: "tamagui",
    visitor: {
      Program: {
        enter(root) {
          let sourcePath = this.file.opts.filename;
          if (sourcePath?.includes("node_modules") || !sourcePath?.endsWith(".jsx") && !sourcePath?.endsWith(".tsx"))
            return;
          process.env.SOURCE_ROOT?.endsWith("ios") && (sourcePath = sourcePath.replace("/ios", ""));
          let hasImportedView = !1, hasImportedViewWrapper = !1;
          const sheetStyles = {}, sheetIdentifier = root.scope.generateUidIdentifier("sheet"), firstCommentContents = (
            // join because you can join together multiple pragmas
            root.node.body[0]?.leadingComments?.map((comment) => comment?.value || " ").join(" ") ?? ""
          ), firstComment = firstCommentContents ? `//${firstCommentContents}` : "", { shouldPrintDebug, shouldDisable } = (0, import_getPragmaOptions.getPragmaOptions)({
            source: firstComment,
            path: sourcePath
          });
          if (shouldDisable)
            return;
          !options.config && !options.components && (tamaguiBuildOptionsLoaded ||= (0, import_loadTamagui.loadTamaguiBuildConfigSync)({}));
          const finalOptions = {
            // @ts-ignore just in case they leave it out
            platform: "native",
            ...tamaguiBuildOptionsLoaded,
            ...options
          }, printLog = (0, import_createLogger.createLogger)(sourcePath, finalOptions);
          function addSheetStyle(style, node) {
            let key = `${`${Object.keys(sheetStyles).length}`}`;
            if (process.env.NODE_ENV === "development") {
              const lineNumbers = node.loc ? node.loc.start.line + (node.loc.start.line !== node.loc.end.line ? `-${node.loc.end.line}` : "") : "";
              key += `:${(0, import_node_path.basename)(sourcePath)}:${lineNumbers}`;
            }
            return sheetStyles[key] = style, readStyleExpr(key);
          }
          function readStyleExpr(key) {
            return (0, import_template.default)("SHEET['KEY']")({
              SHEET: sheetIdentifier.name,
              KEY: key
            }).expression;
          }
          let res;
          try {
            res = extractor.parseSync(root, {
              importsWhitelist: ["constants.js", "colors.js"],
              extractStyledDefinitions: options.forceExtractStyleDefinitions,
              excludeProps: /* @__PURE__ */ new Set([
                "className",
                "userSelect",
                "whiteSpace",
                "textOverflow",
                "cursor",
                "contain"
              ]),
              shouldPrintDebug,
              ...finalOptions,
              // disable this extraction for now at least, need to figure out merging theme vs non-theme
              // because theme need to stay in render(), whereas non-theme can be extracted
              // for now just turn it off entirely at a small perf loss
              disableExtractInlineMedia: !0,
              // disable extracting variables as no native concept of them (only theme values)
              disableExtractVariables: options.experimentalFlattenThemesOnNative ? !1 : "theme",
              sourcePath,
              // disabling flattening for now
              // it's flattening a plain <Paragraph>hello</Paragraph> which breaks things because themes
              // thinking it's not really worth the effort to do much compilation on native
              // for now just disable flatten as it can only run in narrow places on native
              // disableFlattening: 'styled',
              getFlattenedNode({ isTextView }) {
                return hasImportedView || (hasImportedView = !0, root.unshiftContainer("body", importNativeView())), isTextView ? "__ReactNativeText" : "__ReactNativeView";
              },
              onExtractTag(props) {
                const { isFlattened } = props;
                if (!isFlattened)
                  return;
                assertValidTag(props.node);
                const stylesExpr = t.arrayExpression([]), hocStylesExpr = t.arrayExpression([]), expressions = [], finalAttrs = [], themeKeysUsed = /* @__PURE__ */ new Set();
                function getStyleExpression(style) {
                  if (!style) return;
                  const { plain, themed } = splitThemeStyles(style);
                  let themeExpr = null;
                  if (themed && options.experimentalFlattenThemesOnNative) {
                    for (const key in themed)
                      themeKeysUsed.add(themed[key].split("$")[1]);
                    themeExpr = getThemedStyleExpression(themed);
                  }
                  const ident = addSheetStyle(plain, props.node);
                  return themeExpr ? (addStyleExpression(ident), addStyleExpression(ident, !0), themeExpr) : ident;
                }
                function addStyleExpression(expr, HOC = !1) {
                  Array.isArray(expr) ? (HOC ? hocStylesExpr : stylesExpr).elements.push(...expr) : (HOC ? hocStylesExpr : stylesExpr).elements.push(expr);
                }
                function getThemedStyleExpression(styles) {
                  const themedStylesAst = (0, import_literalToAst.literalToAst)(styles);
                  return themedStylesAst.properties.forEach((_) => {
                    const prop = _;
                    prop.value.type === "StringLiteral" && (prop.value = t.memberExpression(
                      t.identifier("theme"),
                      t.identifier(prop.value.value.slice(1) + ".get()")
                    ));
                  }), themedStylesAst;
                }
                let hasDynamicStyle = !1;
                for (const attr of props.attrs)
                  switch (attr.type) {
                    case "style": {
                      let styleExpr = getStyleExpression(attr.value);
                      addStyleExpression(styleExpr), options.experimentalFlattenThemesOnNative && addStyleExpression(styleExpr, !0);
                      break;
                    }
                    case "ternary": {
                      const { consequent, alternate } = attr.value, consExpr = getStyleExpression(consequent), altExpr = getStyleExpression(alternate);
                      options.experimentalFlattenThemesOnNative && (expressions.push(attr.value.test), addStyleExpression(
                        t.conditionalExpression(
                          t.identifier(`_expressions[${expressions.length - 1}]`),
                          consExpr || t.nullLiteral(),
                          altExpr || t.nullLiteral()
                        ),
                        !0
                      ));
                      const styleExpr = t.conditionalExpression(
                        attr.value.test,
                        consExpr || t.nullLiteral(),
                        altExpr || t.nullLiteral()
                      );
                      addStyleExpression(
                        styleExpr
                        // TODO: what is this for ?
                        // isFlattened ? simpleHash(JSON.stringify({ consequent, alternate })) : undefined
                      );
                      break;
                    }
                    case "dynamic-style": {
                      hasDynamicStyle = !0, expressions.push(attr.value), options.experimentalFlattenDynamicValues ? addStyleExpression(
                        t.objectExpression([
                          t.objectProperty(
                            t.identifier(attr.name),
                            t.identifier(`_expressions[${expressions.length - 1}]`)
                          )
                        ]),
                        !0
                      ) : addStyleExpression(
                        t.objectExpression([
                          t.objectProperty(
                            t.identifier(attr.name),
                            attr.value
                          )
                        ])
                      );
                      break;
                    }
                    case "attr": {
                      t.isJSXSpreadAttribute(attr.value) && (0, import_extractHelpers.isSimpleSpread)(attr.value) && (stylesExpr.elements.push(
                        t.memberExpression(attr.value.argument, t.identifier("style"))
                      ), options.experimentalFlattenThemesOnNative && hocStylesExpr.elements.push(
                        t.memberExpression(
                          attr.value.argument,
                          t.identifier("style")
                        )
                      )), finalAttrs.push(attr.value);
                      break;
                    }
                  }
                if (props.node.attributes = finalAttrs, props.isFlattened)
                  if (options.experimentalFlattenThemesOnNative && (themeKeysUsed.size || hocStylesExpr.elements.length > 1 || hasDynamicStyle)) {
                    hasImportedViewWrapper || (root.unshiftContainer("body", importWithStyle()), hasImportedViewWrapper = !0);
                    const name = props.node.name.name, WrapperIdentifier = root.scope.generateUidIdentifier(
                      name + "Wrapper"
                    );
                    root.pushContainer(
                      "body",
                      t.variableDeclaration("const", [
                        t.variableDeclarator(
                          WrapperIdentifier,
                          t.callExpression(t.identifier("__withStableStyle"), [
                            t.identifier(name),
                            t.arrowFunctionExpression(
                              [t.identifier("theme"), t.identifier("_expressions")],
                              t.blockStatement([
                                t.returnStatement(
                                  t.callExpression(
                                    t.memberExpression(
                                      t.identifier("React"),
                                      t.identifier("useMemo")
                                    ),
                                    [
                                      t.arrowFunctionExpression(
                                        [],
                                        t.blockStatement([
                                          t.returnStatement(
                                            t.arrayExpression([...hocStylesExpr.elements])
                                          )
                                        ])
                                      ),
                                      t.arrayExpression([
                                        t.spreadElement(t.identifier("_expressions"))
                                      ])
                                    ]
                                  )
                                )
                              ])
                            )
                          ])
                        )
                      ])
                    ), props.node.name = WrapperIdentifier, props.jsxPath.node.closingElement && (props.jsxPath.node.closingElement.name = WrapperIdentifier), expressions.length && props.node.attributes.push(
                      t.jsxAttribute(
                        t.jsxIdentifier("expressions"),
                        t.jsxExpressionContainer(t.arrayExpression(expressions))
                      )
                    );
                  } else
                    props.node.attributes.push(
                      t.jsxAttribute(
                        t.jsxIdentifier("style"),
                        t.jsxExpressionContainer(
                          stylesExpr.elements.length === 1 ? stylesExpr.elements[0] : stylesExpr
                        )
                      )
                    );
              }
            });
          } catch (err) {
            if (err instanceof Error) {
              let message = `${shouldPrintDebug === "verbose" ? err : err.message}`;
              message.includes("Unexpected return value from visitor method") && (message = "Unexpected return value from visitor method"), console.warn("Error in Tamagui parse, skipping", message, err.stack);
              return;
            }
          }
          if (!Object.keys(sheetStyles).length) {
            shouldPrintDebug && console.info("END no styles"), res && printLog(res);
            return;
          }
          const sheetObject = (0, import_literalToAst.literalToAst)(sheetStyles), sheetOuter = (0, import_template.default)(
            "const SHEET = __ReactNativeStyleSheet.create(null)"
          )({
            SHEET: sheetIdentifier.name
          });
          sheetOuter.declarations[0].init.arguments[0] = sheetObject, root.unshiftContainer("body", sheetOuter), root.unshiftContainer("body", importStyleSheet()), shouldPrintDebug && (console.info(`
 -------- output code ------- 
`), console.info(
            (0, import_generator.default)(root.parent).code.split(`
`).filter((x) => !x.startsWith("//")).join(`
`)
          )), res && printLog(res);
        }
      }
    }
  };
}
function assertValidTag(node) {
  node.attributes.find((x) => x.type === "JSXAttribute" && x.name.name === "style") && process.env.DEBUG?.startsWith("tamagui") && console.warn("\u26A0\uFE0F Cannot pass style attribute to extracted style");
}
function splitThemeStyles(style) {
  const themed = {}, plain = {};
  let noTheme = !0;
  for (const key in style) {
    const val = style[key];
    val && val[0] === "$" ? (themed[key] = val, noTheme = !1) : plain[key] = val;
  }
  return { themed: noTheme ? null : themed, plain };
}
//# sourceMappingURL=extractToNative.js.map

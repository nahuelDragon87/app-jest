"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var extractToNative_exports = {};
__export(extractToNative_exports, {
  extractToNative: () => extractToNative,
  getBabelParseDefinition: () => getBabelParseDefinition,
  getBabelPlugin: () => getBabelPlugin
});
module.exports = __toCommonJS(extractToNative_exports);
var import_node_path = require("node:path"), import_core = require("@babel/core"), import_generator = __toESM(require("@babel/generator")), import_helper_plugin_utils = require("@babel/helper-plugin-utils"), import_parser = require("@babel/parser"), import_template = __toESM(require("@babel/template")), t = __toESM(require("@babel/types")), import_createExtractor = require("./createExtractor"), import_getPragmaOptions = require("../getPragmaOptions"), import_createLogger = require("./createLogger"), import_extractHelpers = require("./extractHelpers"), import_literalToAst = require("./literalToAst"), import_loadTamagui = require("./loadTamagui"), importNativeView = (0, import_template.default)(`
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
`), importStyleSheet = (0, import_template.default)(`
const __ReactNativeStyleSheet = require('react-native').StyleSheet;
`), importWithStyle = (0, import_template.default)(`
const __withStableStyle = require('@tamagui/core')._withStableStyle;
`), extractor = (0, import_createExtractor.createExtractor)({
  platform: "native"
}), tamaguiBuildOptionsLoaded;
function extractToNative(sourceFileName, sourceCode, options) {
  var ast = (0, import_parser.parse)(sourceCode, {
    sourceType: "module",
    plugins: [
      "jsx",
      "typescript"
    ]
  }), babelPlugin = getBabelPlugin(), out = (0, import_core.transformFromAstSync)(ast, sourceCode, {
    plugins: [
      [
        babelPlugin,
        options
      ]
    ],
    configFile: !1,
    sourceFileName,
    filename: sourceFileName
  });
  if (!out)
    throw new Error("No output returned");
  return out;
}
function getBabelPlugin() {
  return (0, import_helper_plugin_utils.declare)(function(api, options) {
    return api.assertVersion(7), getBabelParseDefinition(options);
  });
}
function getBabelParseDefinition(options) {
  return {
    name: "tamagui",
    visitor: {
      Program: {
        enter(root) {
          var _process_env_SOURCE_ROOT, _root_node_body__leadingComments, _root_node_body_, sourcePath = this.file.opts.filename;
          if (sourcePath != null && sourcePath.includes("node_modules") || !(sourcePath != null && sourcePath.endsWith(".jsx")) && !(sourcePath != null && sourcePath.endsWith(".tsx")))
            return;
          !((_process_env_SOURCE_ROOT = process.env.SOURCE_ROOT) === null || _process_env_SOURCE_ROOT === void 0) && _process_env_SOURCE_ROOT.endsWith("ios") && (sourcePath = sourcePath.replace("/ios", ""));
          var hasImportedView = !1, hasImportedViewWrapper = !1, sheetStyles = {}, sheetIdentifier = root.scope.generateUidIdentifier("sheet"), _root_node_body__leadingComments_map_join, firstCommentContents = (_root_node_body__leadingComments_map_join = (_root_node_body_ = root.node.body[0]) === null || _root_node_body_ === void 0 || (_root_node_body__leadingComments = _root_node_body_.leadingComments) === null || _root_node_body__leadingComments === void 0 ? void 0 : _root_node_body__leadingComments.map(function(comment) {
            return (comment == null ? void 0 : comment.value) || " ";
          }).join(" ")) !== null && _root_node_body__leadingComments_map_join !== void 0 ? _root_node_body__leadingComments_map_join : "", firstComment = firstCommentContents ? `//${firstCommentContents}` : "", { shouldPrintDebug, shouldDisable } = (0, import_getPragmaOptions.getPragmaOptions)({
            source: firstComment,
            path: sourcePath
          });
          if (shouldDisable)
            return;
          !options.config && !options.components && (tamaguiBuildOptionsLoaded || (tamaguiBuildOptionsLoaded = (0, import_loadTamagui.loadTamaguiBuildConfigSync)({})));
          var finalOptions = {
            // @ts-ignore just in case they leave it out
            platform: "native",
            ...tamaguiBuildOptionsLoaded,
            ...options
          }, printLog = (0, import_createLogger.createLogger)(sourcePath, finalOptions);
          function addSheetStyle(style, node) {
            var styleIndex = `${Object.keys(sheetStyles).length}`, key = `${styleIndex}`;
            if (process.env.NODE_ENV === "development") {
              var lineNumbers = node.loc ? node.loc.start.line + (node.loc.start.line !== node.loc.end.line ? `-${node.loc.end.line}` : "") : "";
              key += `:${(0, import_node_path.basename)(sourcePath)}:${lineNumbers}`;
            }
            return sheetStyles[key] = style, readStyleExpr(key);
          }
          function readStyleExpr(key) {
            return (0, import_template.default)("SHEET['KEY']")({
              SHEET: sheetIdentifier.name,
              KEY: key
            }).expression;
          }
          var res;
          try {
            res = extractor.parseSync(root, {
              importsWhitelist: [
                "constants.js",
                "colors.js"
              ],
              extractStyledDefinitions: options.forceExtractStyleDefinitions,
              excludeProps: /* @__PURE__ */ new Set([
                "className",
                "userSelect",
                "whiteSpace",
                "textOverflow",
                "cursor",
                "contain"
              ]),
              shouldPrintDebug,
              ...finalOptions,
              // disable this extraction for now at least, need to figure out merging theme vs non-theme
              // because theme need to stay in render(), whereas non-theme can be extracted
              // for now just turn it off entirely at a small perf loss
              disableExtractInlineMedia: !0,
              // disable extracting variables as no native concept of them (only theme values)
              disableExtractVariables: options.experimentalFlattenThemesOnNative ? !1 : "theme",
              sourcePath,
              // disabling flattening for now
              // it's flattening a plain <Paragraph>hello</Paragraph> which breaks things because themes
              // thinking it's not really worth the effort to do much compilation on native
              // for now just disable flatten as it can only run in narrow places on native
              // disableFlattening: 'styled',
              getFlattenedNode(param) {
                var { isTextView } = param;
                return hasImportedView || (hasImportedView = !0, root.unshiftContainer("body", importNativeView())), isTextView ? "__ReactNativeText" : "__ReactNativeView";
              },
              onExtractTag(props) {
                var { isFlattened } = props;
                if (!isFlattened)
                  return;
                assertValidTag(props.node);
                var stylesExpr = t.arrayExpression([]), hocStylesExpr = t.arrayExpression([]), expressions = [], finalAttrs = [], themeKeysUsed = /* @__PURE__ */ new Set();
                function getStyleExpression(style) {
                  if (style) {
                    var { plain, themed } = splitThemeStyles(style), themeExpr = null;
                    if (themed && options.experimentalFlattenThemesOnNative) {
                      for (var key in themed)
                        themeKeysUsed.add(themed[key].split("$")[1]);
                      themeExpr = getThemedStyleExpression(themed);
                    }
                    var ident = addSheetStyle(plain, props.node);
                    return themeExpr ? (addStyleExpression(ident), addStyleExpression(ident, !0), themeExpr) : ident;
                  }
                }
                function addStyleExpression(expr) {
                  var HOC = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
                  Array.isArray(expr) ? (HOC ? hocStylesExpr : stylesExpr).elements.push(...expr) : (HOC ? hocStylesExpr : stylesExpr).elements.push(expr);
                }
                function getThemedStyleExpression(styles) {
                  var themedStylesAst = (0, import_literalToAst.literalToAst)(styles);
                  return themedStylesAst.properties.forEach(function(_) {
                    var prop = _;
                    prop.value.type === "StringLiteral" && (prop.value = t.memberExpression(t.identifier("theme"), t.identifier(prop.value.value.slice(1) + ".get()")));
                  }), themedStylesAst;
                }
                var hasDynamicStyle = !1, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
                try {
                  for (var _iterator = props.attrs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                    var attr = _step.value;
                    switch (attr.type) {
                      case "style": {
                        var styleExpr = getStyleExpression(attr.value);
                        addStyleExpression(styleExpr), options.experimentalFlattenThemesOnNative && addStyleExpression(styleExpr, !0);
                        break;
                      }
                      case "ternary": {
                        var { consequent, alternate } = attr.value, consExpr = getStyleExpression(consequent), altExpr = getStyleExpression(alternate);
                        options.experimentalFlattenThemesOnNative && (expressions.push(attr.value.test), addStyleExpression(t.conditionalExpression(t.identifier(`_expressions[${expressions.length - 1}]`), consExpr || t.nullLiteral(), altExpr || t.nullLiteral()), !0));
                        var styleExpr1 = t.conditionalExpression(attr.value.test, consExpr || t.nullLiteral(), altExpr || t.nullLiteral());
                        addStyleExpression(styleExpr1);
                        break;
                      }
                      case "dynamic-style": {
                        hasDynamicStyle = !0, expressions.push(attr.value), options.experimentalFlattenDynamicValues ? addStyleExpression(t.objectExpression([
                          t.objectProperty(t.identifier(attr.name), t.identifier(`_expressions[${expressions.length - 1}]`))
                        ]), !0) : addStyleExpression(t.objectExpression([
                          t.objectProperty(t.identifier(attr.name), attr.value)
                        ]));
                        break;
                      }
                      case "attr": {
                        t.isJSXSpreadAttribute(attr.value) && (0, import_extractHelpers.isSimpleSpread)(attr.value) && (stylesExpr.elements.push(t.memberExpression(attr.value.argument, t.identifier("style"))), options.experimentalFlattenThemesOnNative && hocStylesExpr.elements.push(t.memberExpression(attr.value.argument, t.identifier("style")))), finalAttrs.push(attr.value);
                        break;
                      }
                    }
                  }
                } catch (err) {
                  _didIteratorError = !0, _iteratorError = err;
                } finally {
                  try {
                    !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
                  } finally {
                    if (_didIteratorError)
                      throw _iteratorError;
                  }
                }
                if (props.node.attributes = finalAttrs, props.isFlattened)
                  if (options.experimentalFlattenThemesOnNative && (themeKeysUsed.size || hocStylesExpr.elements.length > 1 || hasDynamicStyle)) {
                    hasImportedViewWrapper || (root.unshiftContainer("body", importWithStyle()), hasImportedViewWrapper = !0);
                    var name = props.node.name.name, WrapperIdentifier = root.scope.generateUidIdentifier(name + "Wrapper");
                    root.pushContainer("body", t.variableDeclaration("const", [
                      t.variableDeclarator(WrapperIdentifier, t.callExpression(t.identifier("__withStableStyle"), [
                        t.identifier(name),
                        t.arrowFunctionExpression([
                          t.identifier("theme"),
                          t.identifier("_expressions")
                        ], t.blockStatement([
                          t.returnStatement(t.callExpression(t.memberExpression(t.identifier("React"), t.identifier("useMemo")), [
                            t.arrowFunctionExpression([], t.blockStatement([
                              t.returnStatement(t.arrayExpression([
                                ...hocStylesExpr.elements
                              ]))
                            ])),
                            t.arrayExpression([
                              t.spreadElement(t.identifier("_expressions"))
                            ])
                          ]))
                        ]))
                      ]))
                    ])), props.node.name = WrapperIdentifier, props.jsxPath.node.closingElement && (props.jsxPath.node.closingElement.name = WrapperIdentifier), expressions.length && props.node.attributes.push(t.jsxAttribute(t.jsxIdentifier("expressions"), t.jsxExpressionContainer(t.arrayExpression(expressions))));
                  } else
                    props.node.attributes.push(t.jsxAttribute(t.jsxIdentifier("style"), t.jsxExpressionContainer(stylesExpr.elements.length === 1 ? stylesExpr.elements[0] : stylesExpr)));
              }
            });
          } catch (err) {
            if (err instanceof Error) {
              var message = `${shouldPrintDebug === "verbose" ? err : err.message}`;
              message.includes("Unexpected return value from visitor method") && (message = "Unexpected return value from visitor method"), console.warn("Error in Tamagui parse, skipping", message, err.stack);
              return;
            }
          }
          if (!Object.keys(sheetStyles).length) {
            shouldPrintDebug && console.info("END no styles"), res && printLog(res);
            return;
          }
          var sheetObject = (0, import_literalToAst.literalToAst)(sheetStyles), sheetOuter = (0, import_template.default)("const SHEET = __ReactNativeStyleSheet.create(null)")({
            SHEET: sheetIdentifier.name
          });
          sheetOuter.declarations[0].init.arguments[0] = sheetObject, root.unshiftContainer("body", sheetOuter), root.unshiftContainer("body", importStyleSheet()), shouldPrintDebug && (console.info(`
 -------- output code ------- 
`), console.info((0, import_generator.default)(root.parent).code.split(`
`).filter(function(x) {
            return !x.startsWith("//");
          }).join(`
`))), res && printLog(res);
        }
      }
    }
  };
}
function assertValidTag(node) {
  if (node.attributes.find(function(x) {
    return x.type === "JSXAttribute" && x.name.name === "style";
  })) {
    var _process_env_DEBUG;
    !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.warn("\u26A0\uFE0F Cannot pass style attribute to extracted style");
  }
}
function splitThemeStyles(style) {
  var themed = {}, plain = {}, noTheme = !0;
  for (var key in style) {
    var val = style[key];
    val && val[0] === "$" ? (themed[key] = val, noTheme = !1) : plain[key] = val;
  }
  return {
    themed: noTheme ? null : themed,
    plain
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractToNative,
  getBabelParseDefinition,
  getBabelPlugin
});
//# sourceMappingURL=extractToNative.js.map

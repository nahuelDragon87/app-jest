"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var removeUnusedHooks_exports = {};
__export(removeUnusedHooks_exports, {
  removeUnusedHooks: () => removeUnusedHooks
});
module.exports = __toCommonJS(removeUnusedHooks_exports);
var t = __toESM(require("@babel/types")), hooks = {
  useMedia: !0,
  useTheme: !0
};
function removeUnusedHooks(compFn, shouldPrintDebug) {
  compFn.scope.crawl();
  var bodyStatements = compFn == null ? void 0 : compFn.get("body");
  if (!bodyStatements) {
    console.info("no body statemnts?", compFn);
    return;
  }
  if (Array.isArray(bodyStatements) || (bodyStatements.isFunctionExpression() ? bodyStatements = bodyStatements.scope.path.get("body") : bodyStatements = bodyStatements.get("body")), !(!bodyStatements || !Array.isArray(bodyStatements))) {
    var statements = bodyStatements, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
    try {
      for (var _loop = function() {
        var statement = _step.value;
        if (!statement.isVariableDeclaration())
          return "continue";
        var declarations = statement.get("declarations");
        if (!Array.isArray(declarations))
          return "continue";
        var isBindingReferenced = function(name) {
          var _statement_scope_getBinding;
          return !!(!((_statement_scope_getBinding = statement.scope.getBinding(name)) === null || _statement_scope_getBinding === void 0) && _statement_scope_getBinding.referenced);
        }, _iteratorNormalCompletion2 = !0, _didIteratorError2 = !1, _iteratorError2 = void 0;
        try {
          for (var _loop2 = function() {
            var declarator = _step1.value, id = declarator.get("id"), init = declarator.node.init;
            if (Array.isArray(id) || Array.isArray(init))
              return "continue";
            var shouldRemove = function() {
              var isHook = init && t.isCallExpression(init) && t.isIdentifier(init.callee) && hooks[init.callee.name];
              if (!isHook)
                return !1;
              if (t.isIdentifier(id.node)) {
                var name = id.node.name;
                return !isBindingReferenced(name);
              }
              if (t.isObjectPattern(id.node)) {
                var propPaths = id.get("properties");
                return propPaths.every(function(prop) {
                  if (!prop.isObjectProperty()) return !1;
                  var value = prop.get("value");
                  if (Array.isArray(value) || !value.isIdentifier()) return !1;
                  var name2 = value.node.name;
                  return !isBindingReferenced(name2);
                });
              }
              return !1;
            }();
            if (shouldRemove && (declarator.remove(), shouldPrintDebug)) {
              var _id_node_name;
              console.info(`  [\u{1FA9D}] removed ${(_id_node_name = id.node.name) !== null && _id_node_name !== void 0 ? _id_node_name : ""}`);
            }
          }, _iterator2 = declarations[Symbol.iterator](), _step1; !(_iteratorNormalCompletion2 = (_step1 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) _loop2();
        } catch (err) {
          _didIteratorError2 = !0, _iteratorError2 = err;
        } finally {
          try {
            !_iteratorNormalCompletion2 && _iterator2.return != null && _iterator2.return();
          } finally {
            if (_didIteratorError2)
              throw _iteratorError2;
          }
        }
      }, _iterator = statements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) _loop();
    } catch (err) {
      _didIteratorError = !0, _iteratorError = err;
    } finally {
      try {
        !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
      } finally {
        if (_didIteratorError)
          throw _iteratorError;
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  removeUnusedHooks
});
//# sourceMappingURL=removeUnusedHooks.js.map

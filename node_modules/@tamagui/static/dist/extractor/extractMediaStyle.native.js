"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var extractMediaStyle_exports = {};
__export(extractMediaStyle_exports, {
  extractMediaStyle: () => extractMediaStyle,
  isValidMediaCall: () => isValidMediaCall
});
module.exports = __toCommonJS(extractMediaStyle_exports);
var t = __toESM(require("@babel/types")), core = __toESM(require("@tamagui/core")), import_requireTamaguiCore = require("../helpers/requireTamaguiCore"), import_extractHelpers = require("./extractHelpers");
function extractMediaStyle(props, ternary, jsxPath, tamaguiConfig, sourcePath) {
  var importance = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0, shouldPrintDebug = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1, { getStylesAtomic, mediaObjectToString } = (0, import_requireTamaguiCore.requireTamaguiCore)("web"), mt = getMediaQueryTernary(props, ternary, jsxPath, sourcePath);
  if (!mt)
    return null;
  var { key } = mt, mq = tamaguiConfig.media[key];
  if (!mq)
    return console.error(`Media query "${key}" not found: ${Object.keys(tamaguiConfig.media)}`), null;
  var getStyleObj = function(styleObj) {
    var negate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    return styleObj ? {
      styleObj,
      negate
    } : null;
  }, styleOpts = [
    getStyleObj(ternary.consequent, !1),
    getStyleObj(ternary.alternate, !0)
  ].filter(import_extractHelpers.isPresent);
  if (shouldPrintDebug && !styleOpts.length)
    return console.info("  media query, no styles?"), null;
  var mediaKeys = Object.keys(tamaguiConfig.media), mediaKeyPrecendence = mediaKeys.reduce(function(acc, cur, i) {
    return acc[cur] = new Array(importance + 1).fill(":root").join(""), acc;
  }, {}), mediaStyles = [], _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _loop = function() {
      var { styleObj, negate } = _step.value, styles = getStylesAtomic(styleObj), singleMediaStyles = styles.map(function(style) {
        var mediaStyle = core.createMediaStyle(style, key, tamaguiConfig.media, !0, negate), className = `.${mediaStyle[core.StyleObjectIdentifier]}`;
        return {
          ...mediaStyle,
          className
        };
      });
      shouldPrintDebug === "verbose" && console.info("  media styles:", importance, styleObj, singleMediaStyles.map(function(x) {
        return x[core.StyleObjectIdentifier];
      }).join(", ")), mediaStyles = [
        ...mediaStyles,
        ...singleMediaStyles
      ];
    }, _iterator = styleOpts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) _loop();
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  return ternary.remove(), {
    mediaStyles,
    ternaryWithoutMedia: mt.ternaryWithoutMedia
  };
}
function getMediaQueryTernary(props, ternary, jsxPath, sourcePath) {
  if (t.isLogicalExpression(ternary.test) && ternary.test.operator === "&&") {
    var mediaLeft = getMediaInfoFromExpression(props, ternary.test.left, jsxPath, sourcePath, ternary.inlineMediaQuery);
    if (mediaLeft)
      return {
        ...mediaLeft,
        ternaryWithoutMedia: {
          ...ternary,
          test: ternary.test.right
        }
      };
  }
  var result = getMediaInfoFromExpression(props, ternary.test, jsxPath, sourcePath, ternary.inlineMediaQuery);
  return result ? {
    ...result,
    ternaryWithoutMedia: null
  } : null;
}
function getMediaInfoFromExpression(props, test, jsxPath, sourcePath, inlineMediaQuery) {
  if (inlineMediaQuery)
    return {
      key: inlineMediaQuery,
      bindingName: inlineMediaQuery
    };
  if (t.isMemberExpression(test) && t.isIdentifier(test.object) && t.isIdentifier(test.property)) {
    var _binding_path, name = test.object.name, key = test.property.name, bindings = jsxPath.scope.getAllBindings(), binding = bindings[name];
    if (!binding) return !1;
    var bindingNode = (_binding_path = binding.path) === null || _binding_path === void 0 ? void 0 : _binding_path.node;
    return !t.isVariableDeclarator(bindingNode) || !bindingNode.init || !isValidMediaCall(props, jsxPath, bindingNode.init, sourcePath) ? !1 : {
      key,
      bindingName: name
    };
  }
  if (t.isIdentifier(test)) {
    var _jsxPath_scope_getBinding_path, _jsxPath_scope_getBinding, key1 = test.name, node = (_jsxPath_scope_getBinding = jsxPath.scope.getBinding(test.name)) === null || _jsxPath_scope_getBinding === void 0 || (_jsxPath_scope_getBinding_path = _jsxPath_scope_getBinding.path) === null || _jsxPath_scope_getBinding_path === void 0 ? void 0 : _jsxPath_scope_getBinding_path.node;
    return !t.isVariableDeclarator(node) || !node.init || !isValidMediaCall(props, jsxPath, node.init, sourcePath) ? !1 : {
      key: key1,
      bindingName: key1
    };
  }
  return null;
}
function isValidMediaCall(props, jsxPath, init, sourcePath) {
  if (!init || !t.isCallExpression(init) || !t.isIdentifier(init.callee) || init.callee.name !== "useMedia") return !1;
  var bindings = jsxPath.scope.getAllBindings(), mediaBinding = bindings.useMedia;
  if (!mediaBinding) return !1;
  var useMediaImport = mediaBinding.path.parent;
  return !(!t.isImportDeclaration(useMediaImport) || !(0, import_extractHelpers.isValidImport)(props, sourcePath));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractMediaStyle,
  isValidMediaCall
});
//# sourceMappingURL=extractMediaStyle.js.map

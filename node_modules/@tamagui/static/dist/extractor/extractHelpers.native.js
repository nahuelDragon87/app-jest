"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var extractHelpers_exports = {};
__export(extractHelpers_exports, {
  attrStr: () => attrStr,
  findComponentName: () => findComponentName,
  getValidComponent: () => getValidComponent,
  getValidComponentsPaths: () => getValidComponentsPaths,
  getValidImport: () => getValidImport,
  isComponentPackage: () => isComponentPackage,
  isInsideComponentPackage: () => isInsideComponentPackage,
  isPresent: () => isPresent,
  isSimpleSpread: () => isSimpleSpread,
  isValidImport: () => isValidImport,
  isValidModule: () => isValidModule,
  isValidThemeHook: () => isValidThemeHook,
  objToStr: () => objToStr,
  ternaryStr: () => ternaryStr
});
module.exports = __toCommonJS(extractHelpers_exports);
var import_node_path = require("node:path"), import_generator = __toESM(require("@babel/generator")), t = __toESM(require("@babel/types")), import_find_root = __toESM(require("find-root")), import_memoize = require("../helpers/memoize");
function isPresent(input) {
  return input != null;
}
function isSimpleSpread(node) {
  return t.isIdentifier(node.argument) || t.isMemberExpression(node.argument);
}
var attrStr = function(attr) {
  return attr ? attr.type === "attr" ? getNameAttr(attr.value) : attr.type === "ternary" ? `...${ternaryStr(attr.value)}` : `${attr.type}(${objToStr(attr.value)})` : "";
}, objToStr = function(obj) {
  var spacer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ", ";
  return obj ? `{${Object.entries(obj).map(function(param) {
    var [k, v] = param;
    return `${k}:${Array.isArray(v) ? "[...]" : v && typeof v == "object" ? `${objToStr(v, ",")}` : JSON.stringify(v)}`;
  }).join(spacer)}}` : `${obj}`;
}, getNameAttr = function(attr) {
  return t.isJSXSpreadAttribute(attr) ? `...${attr.argument.name}` : "name" in attr ? attr.name.name : `unknown-${attr.type}`;
}, ternaryStr = function(x) {
  var conditional = t.isIdentifier(x.test) ? x.test.name : t.isMemberExpression(x.test) ? [
    x.test.object.name,
    x.test.property.name
  ] : (
    // @ts-ignore
    (0, import_generator.default)(x.test).code
  );
  return [
    "ternary(",
    conditional,
    isFilledObj(x.consequent) ? ` ? ${objToStr(x.consequent)}` : " ? \u{1F6AB}",
    isFilledObj(x.alternate) ? ` : ${objToStr(x.alternate)}` : " : \u{1F6AB}",
    ")"
  ].flat().join("");
}, isFilledObj = function(obj) {
  return obj && Object.keys(obj).length;
};
function findComponentName(scope) {
  for (var componentName = "", cur = scope.path; cur.parentPath && !t.isProgram(cur.parentPath.parent); )
    cur = cur.parentPath;
  var node = cur.parent;
  if (t.isExportNamedDeclaration(node) && (node = node.declaration), t.isVariableDeclaration(node)) {
    var [dec] = node.declarations;
    if (t.isVariableDeclarator(dec) && t.isIdentifier(dec.id))
      return dec.id.name;
  }
  if (t.isFunctionDeclaration(node)) {
    var _node_id;
    return (_node_id = node.id) === null || _node_id === void 0 ? void 0 : _node_id.name;
  }
  return componentName;
}
function isValidThemeHook(props, jsxPath, n, sourcePath) {
  var _binding_scope_getBinding;
  if (!t.isIdentifier(n.object) || !t.isIdentifier(n.property)) return !1;
  var bindings = jsxPath.scope.getAllBindings(), binding = bindings[n.object.name];
  if (!(binding != null && binding.path) || !binding.path.isVariableDeclarator()) return !1;
  var init = binding.path.node.init;
  if (!init || !t.isCallExpression(init) || !t.isIdentifier(init.callee) || init.callee.name !== "useTheme") return !1;
  var importNode = (_binding_scope_getBinding = binding.scope.getBinding("useTheme")) === null || _binding_scope_getBinding === void 0 ? void 0 : _binding_scope_getBinding.path.parent;
  return !(!t.isImportDeclaration(importNode) || sourcePath && !isValidImport(props, sourcePath));
}
var isInsideComponentPackage = function(props, moduleName) {
  return getValidComponentsPaths(props).some(function(path) {
    return moduleName.startsWith(path);
  });
}, isComponentPackage = function(props, srcName) {
  return getValidComponentsPaths(props).some(function(path) {
    return srcName.startsWith(path);
  });
};
function getValidComponent(props, moduleName, componentName) {
  if (componentName[0].toUpperCase() !== componentName[0])
    return !1;
  var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = props.allLoadedComponents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var loaded = _step.value;
      if (loaded) {
        var isInModule = moduleName === "*" || moduleName.startsWith(loaded.moduleName), foundComponent = loaded.nameToInfo[componentName];
        if (isInModule && foundComponent)
          return foundComponent;
      }
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  return null;
}
var isValidModule = function(props, moduleName) {
  if (typeof moduleName != "string")
    throw new Error("No module name");
  var isLocal = moduleName.startsWith(".");
  return {
    isLocal,
    isValid: isLocal ? isInsideComponentPackage(props, moduleName) : isComponentPackage(props, moduleName)
  };
}, getValidImport = function(props, moduleName, componentName) {
  var { isValid, isLocal } = isValidModule(props, moduleName);
  return !isValid || !componentName ? null : getValidComponent(props, isLocal ? "*" : moduleName, componentName) || null;
}, isValidImport = function(props, moduleName, componentName) {
  return componentName ? !!getValidImport(props, moduleName, componentName) : isValidModule(props, moduleName).isValid;
}, getValidComponentPackages = (0, import_memoize.memoize)(function(props) {
  return [
    .../* @__PURE__ */ new Set([
      "@tamagui/core",
      "tamagui",
      ...props.components || []
    ])
  ];
}), getValidComponentsPaths = (0, import_memoize.memoize)(function(props) {
  return getValidComponentPackages(props).flatMap(function(pkg) {
    var root = (0, import_find_root.default)(pkg), based = (0, import_node_path.basename)(root);
    return [
      based,
      pkg
    ].filter(Boolean);
  });
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  attrStr,
  findComponentName,
  getValidComponent,
  getValidComponentsPaths,
  getValidImport,
  isComponentPackage,
  isInsideComponentPackage,
  isPresent,
  isSimpleSpread,
  isValidImport,
  isValidModule,
  isValidThemeHook,
  objToStr,
  ternaryStr
});
//# sourceMappingURL=extractHelpers.js.map

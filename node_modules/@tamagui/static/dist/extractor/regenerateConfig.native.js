"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var regenerateConfig_exports = {};
__export(regenerateConfig_exports, {
  generateTamaguiThemes: () => generateTamaguiThemes,
  regenerateConfig: () => regenerateConfig,
  regenerateConfigSync: () => regenerateConfigSync
});
module.exports = __toCommonJS(regenerateConfig_exports);
var import_node_path = require("node:path"), import_generate_themes = require("@tamagui/generate-themes"), FS = __toESM(require("fs-extra")), import_requireTamaguiCore = require("../helpers/requireTamaguiCore"), import_bundleConfig = require("./bundleConfig"), tamaguiDir = (0, import_node_path.join)(process.cwd(), ".tamagui"), confFile = (0, import_node_path.join)(tamaguiDir, "tamagui.config.json");
async function regenerateConfig(tamaguiOptions, configIn) {
  var rebuild = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
  try {
    var config = configIn ?? await (0, import_bundleConfig.getBundledConfig)(tamaguiOptions, rebuild);
    if (!config) return;
    var out = transformConfig(config, tamaguiOptions.platform || "web");
    await FS.ensureDir((0, import_node_path.dirname)(confFile)), await FS.writeJSON(confFile, out, {
      spaces: 2
    });
  } catch (err) {
    var _process_env_DEBUG;
    (!((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.includes("tamagui") || process.env.IS_TAMAGUI_DEV) && console.warn("regenerateConfig error", err);
  }
}
function regenerateConfigSync(_tamaguiOptions, config) {
  try {
    FS.ensureDirSync((0, import_node_path.dirname)(confFile)), FS.writeJSONSync(confFile, transformConfig(config, _tamaguiOptions.platform || "web"), {
      spaces: 2
    });
  } catch (err) {
    var _process_env_DEBUG;
    (!((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.includes("tamagui") || process.env.IS_TAMAGUI_DEV) && console.warn("regenerateConfig error", err);
  }
}
async function generateTamaguiThemes(tamaguiOptions) {
  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  if (tamaguiOptions.themeBuilder) {
    var { input, output } = tamaguiOptions.themeBuilder, inPath = resolveRelativePath(input), outPath = resolveRelativePath(output), generatedOutput = await (0, import_generate_themes.generateThemes)(inPath), hasChanged = force || await async function() {
      try {
        if (!generatedOutput) return !1;
        var next = generatedOutput.generated, current = await FS.readFile(outPath, "utf-8");
        return next !== current;
      } catch {
      }
      return !0;
    }();
    return hasChanged && await (0, import_generate_themes.writeGeneratedThemes)(tamaguiDir, outPath, generatedOutput), hasChanged;
  }
}
var resolveRelativePath = function(inputPath) {
  return inputPath.startsWith(".") ? (0, import_node_path.join)(process.cwd(), inputPath) : require.resolve(inputPath);
};
function cloneDeepSafe(x) {
  var excludeKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return x && (Array.isArray(x) ? x.map(function(_) {
    return cloneDeepSafe(_);
  }) : typeof x == "function" ? "Function" : typeof x != "object" ? x : "$$typeof" in x ? "Component" : Object.fromEntries(Object.entries(x).flatMap(function(param) {
    var [k, v] = param;
    return excludeKeys[k] ? [] : [
      [
        k,
        cloneDeepSafe(v)
      ]
    ];
  })));
}
function transformConfig(config, platform) {
  if (!config)
    return null;
  var { getVariableValue } = (0, import_requireTamaguiCore.requireTamaguiCore)(platform), next = cloneDeepSafe(config, {
    validStyles: !0
  }), { components, nameToPaths, tamaguiConfig } = next, { themes, tokens } = tamaguiConfig;
  for (var key in themes) {
    var theme = themes[key];
    theme.id = key;
    for (var tkey in theme)
      theme[tkey] = getVariableValue(theme[tkey]);
  }
  for (var key1 in tokens) {
    var token = {
      ...tokens[key1]
    };
    for (var tkey1 in token)
      token[tkey1] = getVariableValue(token[tkey1]);
  }
  var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var component = _step.value;
      for (var _ in component.nameToInfo) {
        var compDefinition = {
          ...component.nameToInfo[_]
        };
        component.nameToInfo[_] = compDefinition;
        var { parentStaticConfig, ...rest } = compDefinition.staticConfig;
        compDefinition.staticConfig = rest;
      }
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  next.nameToPaths = {};
  for (var key2 in nameToPaths)
    next.nameToPaths[key2] = [
      ...nameToPaths[key2]
    ];
  var { fontsParsed, getCSS, tokensParsed, themeConfig, ...cleanedConfig } = next.tamaguiConfig;
  return {
    components,
    nameToPaths,
    tamaguiConfig: cleanedConfig
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateTamaguiThemes,
  regenerateConfig,
  regenerateConfigSync
});
//# sourceMappingURL=regenerateConfig.js.map

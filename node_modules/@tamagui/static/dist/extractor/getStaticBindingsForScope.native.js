"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getStaticBindingsForScope_exports = {};
__export(getStaticBindingsForScope_exports, {
  cleanupBeforeExit: () => cleanupBeforeExit,
  getStaticBindingsForScope: () => getStaticBindingsForScope
});
module.exports = __toCommonJS(getStaticBindingsForScope_exports);
var import_node_child_process = require("node:child_process"), import_node_path = require("node:path"), t = __toESM(require("@babel/types")), import_evaluateAstNode = require("./evaluateAstNode"), import_getSourceModule = require("./getSourceModule");
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
var isLocalImport = function(path) {
  return path.startsWith(".") || path.startsWith("/");
};
function resolveImportPath(sourcePath, path) {
  var sourceDir = (0, import_node_path.dirname)(sourcePath);
  return isLocalImport(path) ? ((0, import_node_path.extname)(path) === "" && (path += ""), (0, import_node_path.resolve)(sourceDir, path)) : path;
}
var cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Map(), loadCmd = `${(0, import_node_path.join)(__dirname, "loadFile.js")}`, exited = !1, child = null;
function forkChild() {
  child = (0, import_node_child_process.fork)(loadCmd, [], {
    execArgv: [
      "-r",
      "esbuild-register"
    ],
    detached: !1,
    stdio: "ignore"
  });
}
function cleanupBeforeExit() {
  exited || child && (child.removeAllListeners(), child.unref(), child.disconnect(), child.kill(), exited = !0);
}
process.once("SIGTERM", cleanupBeforeExit);
process.once("SIGINT", cleanupBeforeExit);
process.once("beforeExit", cleanupBeforeExit);
function importModule(path) {
  if (child || forkChild(), pending.has(path))
    return pending.get(path);
  var promise = new Promise(function(res, rej) {
    if (child) {
      if (cache.size > 2e3 && cache.clear(), cache.has(path))
        return cache.get(path);
      var listener = function(msg) {
        if (child && msg && typeof msg == "string") {
          if (msg[0] === "-") {
            rej(new Error(msg.slice(1)));
            return;
          }
          child.removeListener("message", listener);
          var val = JSON.parse(msg);
          cache.set(path, val), res(val);
        }
      };
      child.once("message", listener), child.send(`${path.replace(".js", "")}`);
    }
  });
  return pending.set(path, promise), promise;
}
async function getStaticBindingsForScope(scope) {
  var _loop = function(k2) {
    var binding = bindings[k2], sourceModule = (0, import_getSourceModule.getSourceModule)(k2, binding);
    if (sourceModule) {
      if (!sourceModule.sourceModule)
        return "continue";
      var moduleName = resolveImportPath(sourcePath, sourceModule.sourceModule), isOnWhitelist = whitelist.some(function(test) {
        return moduleName.endsWith(test);
      });
      if (isOnWhitelist) {
        var src = importModule(moduleName);
        if (!src)
          return console.info(`    | \u26A0\uFE0F Missing file ${moduleName} via ${sourcePath} import ${sourceModule.sourceModule}?`), {
            v: {}
          };
        sourceModule.destructured ? sourceModule.imported && (ret[k2] = src[sourceModule.imported]) : ret[k2] = src;
      }
      return "continue";
    }
    var { parent } = binding.path;
    if (!t.isVariableDeclaration(parent) || parent.kind !== "const")
      return "continue";
    var dec = parent.declarations.find(function(d) {
      return t.isIdentifier(d.id) && d.id.name === k2;
    });
    if (!dec || !dec.init)
      return "continue";
    if (typeof dec.id.start != "number" || typeof dec.id.end != "number")
      return console.error("dec.id.start/end is not a number"), "continue";
    if (!t.isIdentifier(dec.id))
      return console.error("dec is not an identifier"), "continue";
    var cacheKey = `${dec.id.name}_${dec.id.start}-${dec.id.end}`;
    if (Object.hasOwnProperty.call(bindingCache, cacheKey) || Object.hasOwnProperty.call(bindingCache, cacheKey))
      return ret[k2] = bindingCache[cacheKey], "continue";
    try {
      return ret[k2] = (0, import_evaluateAstNode.evaluateAstNode)(dec.init, void 0, shouldPrintDebug), bindingCache[cacheKey] = ret[k2], "continue";
    } catch {
    }
  }, whitelist = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], sourcePath = arguments.length > 2 ? arguments[2] : void 0, bindingCache = arguments.length > 3 ? arguments[3] : void 0, shouldPrintDebug = arguments.length > 4 ? arguments[4] : void 0, bindings = scope.getAllBindings(), ret = {}, program = scope.getProgramParent().block, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _loop1 = async function() {
      var node = _step.value;
      if (t.isImportDeclaration(node)) {
        var importPath = node.source.value;
        if (!node.specifiers.length || !isLocalImport(importPath))
          return "continue";
        var moduleName = resolveImportPath(sourcePath, importPath), isOnWhitelist = whitelist.some(function(test) {
          return moduleName.endsWith(test);
        });
        if (!isOnWhitelist) return "continue";
        try {
          var src = await importModule(moduleName);
          if (!src) return "continue";
          var _iteratorNormalCompletion2 = !0, _didIteratorError2 = !1, _iteratorError2 = void 0;
          try {
            for (var _iterator2 = node.specifiers[Symbol.iterator](), _step1; !(_iteratorNormalCompletion2 = (_step1 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {
              var specifier = _step1.value;
              if (t.isImportSpecifier(specifier) && t.isIdentifier(specifier.imported) && typeof src[specifier.imported.name] < "u") {
                var val = src[specifier.local.name];
                ret[specifier.local.name] = val;
              }
            }
          } catch (err) {
            _didIteratorError2 = !0, _iteratorError2 = err;
          } finally {
            try {
              !_iteratorNormalCompletion2 && _iterator2.return != null && _iterator2.return();
            } finally {
              if (_didIteratorError2)
                throw _iteratorError2;
            }
          }
        } catch (err) {
          var _process_env_DEBUG;
          shouldPrintDebug ? console.warn(`    | Skipping partial evaluation of constant file: ${moduleName} (DEBUG=tamagui for more)`) : !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.info("Error in partial evaluation", err.message, err.stack);
        }
      }
    }, _iterator = program.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) await _loop1();
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  if (!bindingCache)
    throw new Error("BindingCache is a required param");
  for (var k in bindings) {
    var _ret = _loop(k);
    if (_type_of(_ret) === "object") return _ret.v;
  }
  return ret;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cleanupBeforeExit,
  getStaticBindingsForScope
});
//# sourceMappingURL=getStaticBindingsForScope.js.map

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var registerRequire_exports = {};
__export(registerRequire_exports, {
  getNameToPaths: () => getNameToPaths,
  registerRequire: () => registerRequire,
  setRequireResult: () => setRequireResult
});
module.exports = __toCommonJS(registerRequire_exports);
var import_node = require("esbuild-register/dist/node"), import_bundle = require("./extractor/bundle"), import_requireTamaguiCore = require("./helpers/requireTamaguiCore");
const nameToPaths = {}, getNameToPaths = () => nameToPaths, Module = require("node:module"), proxyWorm = require("@tamagui/proxy-worm");
let isRegistered = !1, og;
const whitelisted = {
  react: !0
}, compiled = {};
function setRequireResult(name, result) {
  compiled[name] = result;
}
function registerRequire(platform, { proxyWormImports } = {
  proxyWormImports: !1
}) {
  if (isRegistered)
    return {
      tamaguiRequire: require,
      unregister: () => {
      }
    };
  const { unregister } = (0, import_node.register)({
    hookIgnoreNodeModules: !1
  });
  og || (og = Module.prototype.require), isRegistered = !0, Module.prototype.require = tamaguiRequire;
  function tamaguiRequire(path) {
    if (path === "tamagui" && platform === "native")
      return og.apply(this, ["tamagui/native"]);
    if (path === "@tamagui/core" || path === "@tamagui/web")
      return (0, import_requireTamaguiCore.requireTamaguiCore)(platform, (path2) => og.apply(this, [path2]));
    if (path in compiled)
      return compiled[path];
    if (import_bundle.esbuildIgnoreFilesRegex.test(path))
      return {};
    if (path === "react-native-svg")
      return og.apply(this, ["@tamagui/react-native-svg"]);
    if (path === "@gorhom/bottom-sheet" || path.startsWith("react-native-reanimated") || path === "expo-linear-gradient" || path === "@expo/vector-icons" || path === "tamagui/linear-gradient")
      return proxyWorm;
    if (path === "react-native/package.json")
      return require("react-native-web/package.json");
    if (path === "@tamagui/react-native-web-lite" || path === "react-native" || path.startsWith("react-native/"))
      try {
        return require("react-native-web");
      } catch {
        return require("@tamagui/react-native-web-lite");
      }
    if (path in knownIgnorableModules)
      return proxyWorm;
    if (!whitelisted[path] && proxyWormImports && !path.includes(".tamagui-dynamic-eval"))
      return path === "tamagui" ? og.apply(this, [path]) : proxyWorm;
    try {
      return og.apply(this, arguments);
    } catch (err) {
      return !process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && path.includes("tamagui-dynamic-eval") ? void 0 : (allowedIgnores[path] || IGNORES === "true" || (!process.env.TAMAGUI_SHOW_FULL_BUNDLE_ERRORS && !process.env.DEBUG ? hasWarnedForModules.has(path) || (hasWarnedForModules.add(path), console.info(
        `  tamagui: skipping ${path} tamagui.dev/docs/intro/errors#warning-001`
      )) : console.error(
        `Tamagui failed loading "${path}"
  
  ${err.message}
  ${err.stack}

  `
      )), proxyWorm);
    }
  }
  return {
    tamaguiRequire,
    unregister: () => {
      unregister(), isRegistered = !1, Module.prototype.require = og;
    }
  };
}
const IGNORES = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS, extraIgnores = IGNORES === "true" ? [] : process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS?.split(","), knownIgnorableModules = {
  "expo-modules": !0,
  solito: !0,
  ...Object.fromEntries(extraIgnores?.map((k) => [k, !0]) || [])
}, hasWarnedForModules = /* @__PURE__ */ new Set(), allowedIgnores = {
  "expo-constants": !0,
  "./ExpoHaptics": !0,
  "./js/MaskedView": !0
};
//# sourceMappingURL=registerRequire.js.map

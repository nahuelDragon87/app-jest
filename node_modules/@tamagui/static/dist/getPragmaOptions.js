var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getPragmaOptions_exports = {};
__export(getPragmaOptions_exports, {
  getPragmaOptions: () => getPragmaOptions
});
module.exports = __toCommonJS(getPragmaOptions_exports);
function getPragmaOptions({
  source,
  path
}) {
  let shouldPrintDebug = !1, shouldDisable = !1;
  const firstLines = source.slice(0, 800);
  let pragma = "";
  for (const line of firstLines.split(`
`))
    if (pragma = line.match(/(\/\/|\/\*)\s?\!?\s?(tamagui-ignore|debug|debug-verbose)(\n|\s|$).*/)?.[2].trim() || "", pragma) {
      pragma = pragma.replace("!", "").trim();
      break;
    }
  switch (pragma) {
    case "tamagui-ignore":
      shouldDisable = !0;
      break;
    case "debug":
      shouldPrintDebug = !0;
      break;
    case "debug-verbose":
      shouldPrintDebug = "verbose";
      break;
  }
  return process.env.TAMAGUI_DEBUG_FILE && path.includes(process.env.TAMAGUI_DEBUG_FILE) && (shouldPrintDebug = "verbose"), process.env.DEBUG?.includes("tamagui") && (shouldPrintDebug ||= !0), process.env.DEBUG?.includes("tamagui-verbose") && (shouldPrintDebug = "verbose"), {
    shouldPrintDebug,
    shouldDisable
  };
}
//# sourceMappingURL=getPragmaOptions.js.map

import Module from "node:module";
import { join } from "node:path";
const ogRequire = Module.prototype.require;
let didRegisterOnce = !1;
async function generateThemes(inputFile) {
  didRegisterOnce || require("esbuild-register/dist/node").register({
    hookIgnoreNodeModules: !1
  });
  const inputFilePath = inputFile[0] === "." ? join(process.cwd(), inputFile) : inputFile;
  purgeCache(inputFilePath);
  let promise = null;
  Module.prototype.require = function (id) {
    const out = ogRequire.apply(this, arguments);
    if (id === "@tamagui/theme-builder" && !promise) {
      let resolve;
      return promise = new Promise(res => {
        resolve = res;
      }), createThemeIntercept(out, {
        onComplete: result => {
          resolve?.(result.themeBuilder);
        }
      });
    }
    return out;
  };
  try {
    const requiredThemes = require(inputFilePath),
      themes = requiredThemes.default || requiredThemes.themes || requiredThemes[Object.keys(requiredThemes)[0]],
      generatedThemes = generatedThemesToTypescript(themes);
    let tm;
    if (promise) {
      let finished = !1;
      promise.then(() => {
        finished = !0;
      }), tm = setTimeout(() => {
        finished || console.warn("Warning: ThemeBuilder didn't finish after a couple seconds, did you forget to call .build()?");
      }, 2e3);
    }
    const themeBuilder = promise ? await promise : null;
    return clearTimeout(tm), {
      generated: generatedThemes,
      state: themeBuilder?.state
    };
  } catch (err) {
    console.warn(` \u26A0\uFE0F Error running theme builder: ${err}`, err?.stack);
  } finally {
    Module.prototype.require = ogRequire;
  }
}
const dedupedTokens = /* @__PURE__ */new Map();
function generatedThemesToTypescript(themes) {
  const dedupedThemes = /* @__PURE__ */new Map(),
    dedupedThemeToNames = /* @__PURE__ */new Map();
  let i = 0;
  for (const name in themes) {
    i++;
    const theme = themes[name];
    let j = 0;
    for (const [key2, value] of Object.entries(theme)) {
      i++;
      const uniqueKey = `t${i}${j}`;
      dedupedTokens.has(value) || dedupedTokens.set(value, uniqueKey);
    }
    const key = JSON.stringify(theme);
    dedupedThemes.has(key) ? dedupedThemeToNames.set(key, [...dedupedThemeToNames.get(key), name]) : (dedupedThemes.set(key, theme), dedupedThemeToNames.set(key, [name]));
  }
  if (!themes) throw new Error("Didn't find any themes exported or returned");
  const baseKeys = Object.entries(themes.light || themes[Object.keys(themes)[0]]);
  let out = `${`type Theme = {
${baseKeys.map(([k]) => `  ${k}: string;
`).join("")}
}`}
`;
  out += `
function t(a: [number, number][]) {
  let res: Record<string,string> = {}
  for (const [ki, vi] of a) {
    res[ks[ki] as string] = vs[vi] as string
  }
  return res as Theme
}
`, out += `const vs = [
`;
  let index = 0;
  const valueToIndex = {};
  dedupedTokens.forEach((name, value) => {
    valueToIndex[value] = index, index++, out += `  '${value}',
`;
  }), out += `]

`;
  const keys = baseKeys.map(([k]) => k);
  out += `const ks = [
`, out += keys.map(k => `'${k}'`).join(`,
`), out += `]

`;
  let nameI = 0;
  return dedupedThemes.forEach(theme => {
    nameI++;
    const key = JSON.stringify(theme),
      names = dedupedThemeToNames.get(key),
      name = `n${nameI}`,
      baseTheme = `const ${name} = ${objectToJsString(theme, keys, valueToIndex)}`;
    out += `
${baseTheme}`;
    const duplicateThemes = names.map(n => `export const ${n} = ${name}`);
    out += `

` + duplicateThemes.join(`
`);
  }), out;
}
function objectToJsString(obj, keys, valueToIndex) {
  let arrItems = [];
  for (const key in obj) {
    const ki = keys.indexOf(key),
      vi = valueToIndex[obj[key]];
    arrItems.push(`[${ki}, ${vi}]`);
  }
  return `t([${arrItems.join(",")}])`;
}
function createThemeIntercept(createThemeExport, themeBuilderInterceptOpts) {
  return new Proxy(createThemeExport, {
    get(target, key) {
      const out = Reflect.get(target, key);
      return key === "createThemeBuilder" ? new Proxy(out, {
        apply(target2, thisArg, argArray) {
          const builder = Reflect.apply(target2, thisArg, argArray);
          return themeBuilderIntercept(builder, themeBuilderInterceptOpts);
        }
      }) : out;
    }
  });
}
function themeBuilderIntercept(themeBuilder, themeBuilderInterceptOpts) {
  return new Proxy(themeBuilder, {
    get(target, key) {
      const out = Reflect.get(target, key);
      return key === "build" && themeBuilderInterceptOpts.onComplete({
        themeBuilder
      }), out;
    }
  });
}
function purgeCache(moduleName) {
  searchCache(moduleName, function (mod) {
    delete require.cache[mod.id];
  }), Object.keys(module.constructor._pathCache).forEach(function (cacheKey) {
    cacheKey.indexOf(moduleName) > 0 && delete module.constructor._pathCache[cacheKey];
  });
}
function searchCache(moduleName, callback) {
  let mod = require.resolve(moduleName);
  mod && (mod = require.cache[mod]) !== void 0 && function traverse(mod2, depth = 0) {
    depth > 10 || (mod2.children.forEach(function (child) {
      traverse(child, depth + 1);
    }), callback(mod2));
  }(mod);
}
export { generateThemes };
//# sourceMappingURL=generate-themes.mjs.map

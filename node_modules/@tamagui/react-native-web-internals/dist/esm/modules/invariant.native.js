function invariant(condition, log) {
  for (var _len = arguments.length, logVars = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
    logVars[_key - 2] = arguments[_key];
  if (!condition)
    throw new Error(process.env.NODE_ENV === "development" ? log.split("%s").flatMap(function(chunk, i) {
      return [
        chunk,
        logVars[i]
      ];
    }).join("") : log);
}
function warning(condition, log) {
  for (var _len = arguments.length, logVars = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
    logVars[_key - 2] = arguments[_key];
  if (process.env.NODE_ENV === "development")
    try {
      invariant(condition, log, ...logVars);
    } catch (err) {
      console.warn(err);
    }
}
export {
  invariant,
  warning
};
//# sourceMappingURL=invariant.js.map

import { jsx as _jsx } from "react/jsx-runtime";
import { cleanup, render } from "@testing-library/react";
import * as React from "react";
import { act } from "react-dom/test-utils";
import useMergeRefs from "..";
describe("modules/useMergeRefs/index.js", function() {
  function TestComponent(param) {
    var { refs, ...rest } = param, mergedRef = useMergeRefs(...refs);
    return /* @__PURE__ */ _jsx("div", {
      ref: mergedRef,
      ...rest
    });
  }
  afterEach(cleanup), test("handles no refs", function() {
    act(function() {
      render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: []
      }));
    });
  }), test("merges any number of varying refs", function() {
    var callbackRef1 = jest.fn(), callbackRef2 = jest.fn(), objectRef1 = /* @__PURE__ */ React.createRef(), objectRef2 = /* @__PURE__ */ React.createRef(), nullRef = null;
    act(function() {
      render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          callbackRef1,
          callbackRef2,
          objectRef1,
          objectRef2,
          nullRef
        ]
      }));
    }), expect(callbackRef1).toHaveBeenCalledTimes(1), expect(callbackRef2).toHaveBeenCalledTimes(1), expect(objectRef1.current).toBeInstanceOf(HTMLDivElement), expect(objectRef2.current).toBeInstanceOf(HTMLDivElement);
  }), test("ref is called when ref changes", function() {
    var ref = jest.fn(), nextRef = jest.fn(), rerender;
    act(function() {
      ({ rerender } = render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      })));
    }), expect(ref).toHaveBeenCalled(), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          nextRef
        ]
      }));
    }), expect(nextRef).toHaveBeenCalled();
  }), test("ref is not called for each rerender", function() {
    var ref = jest.fn(), rerender;
    act(function() {
      ({ rerender } = render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      })));
    }), expect(ref).toHaveBeenCalledTimes(1), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      }));
    }), expect(ref).toHaveBeenCalledTimes(1);
  }), test("ref is not called for props changes", function() {
    var ref = jest.fn(), rerender;
    act(function() {
      ({ rerender } = render(/* @__PURE__ */ _jsx(TestComponent, {
        id: "foo",
        refs: [
          ref
        ]
      })));
    }), expect(ref).toHaveBeenCalledTimes(1), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        id: "bar",
        refs: [
          ref
        ]
      }));
    }), expect(ref).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=index-test.js.map

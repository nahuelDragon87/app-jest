var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import__ = __toESM(require(".."));
const platformSpecific = (x) => x;
describe("processColor", () => {
  describe("predefined color names", () => {
    it("should convert red", () => {
      const colorFromString = (0, import__.default)("red");
      expect(colorFromString).toEqual(platformSpecific(4294901760));
    }), it("should convert white", () => {
      const colorFromString = (0, import__.default)("white");
      expect(colorFromString).toEqual(platformSpecific(4294967295));
    }), it("should convert black", () => {
      const colorFromString = (0, import__.default)("black");
      expect(colorFromString).toEqual(platformSpecific(4278190080));
    }), it("should convert transparent", () => {
      const colorFromString = (0, import__.default)("transparent");
      expect(colorFromString).toEqual(platformSpecific(0));
    });
  }), describe("RGB strings", () => {
    it("should convert rgb(x, y, z)", () => {
      const colorFromString = (0, import__.default)("rgb(10, 20, 30)");
      expect(colorFromString).toEqual(platformSpecific(4278850590));
    });
  }), describe("RGBA strings", () => {
    it("should convert rgba(x, y, z, a)", () => {
      const colorFromString = (0, import__.default)("rgba(10, 20, 30, 0.4)");
      expect(colorFromString).toEqual(platformSpecific(1711936542));
    });
  }), describe("HSL strings", () => {
    it("should convert hsl(x, y%, z%)", () => {
      const colorFromString = (0, import__.default)("hsl(318, 69%, 55%)");
      expect(colorFromString).toEqual(platformSpecific(4292558252));
    });
  }), describe("HSLA strings", () => {
    it("should convert hsla(x, y%, z%, a)", () => {
      const colorFromString = (0, import__.default)("hsla(318, 69%, 55%, 0.25)");
      expect(colorFromString).toEqual(platformSpecific(1088109996));
    });
  }), describe("hex strings", () => {
    it("should convert #xxxxxx", () => {
      const colorFromString = (0, import__.default)("#1e83c9");
      expect(colorFromString).toEqual(platformSpecific(4280189897));
    });
  });
});
//# sourceMappingURL=index-test.js.map

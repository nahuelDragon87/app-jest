"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createAnimations_exports = {};
__export(createAnimations_exports, {
  createAnimations: () => createAnimations
});
module.exports = __toCommonJS(createAnimations_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_use_presence = require("@tamagui/use-presence"), import_web = require("@tamagui/web"), import_author = require("moti/author"), import_react = __toESM(require("react")), import_react_native_reanimated = __toESM(require("react-native-reanimated"));
function createTamaguiAnimatedComponent() {
  var defaultTag = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "div", isText = defaultTag === "span", Component = import_react_native_reanimated.default.createAnimatedComponent(/* @__PURE__ */ (0, import_react.forwardRef)(function(propsIn, ref) {
    var _hooks_usePropsTransform, { forwardedRef, animation, tag = defaultTag, ...propsRest } = propsIn, hostRef = (0, import_react.useRef)(), composedRefs = (0, import_web.useComposedRefs)(forwardedRef, ref, hostRef), stateRef = (0, import_react.useRef)();
    stateRef.current || (stateRef.current = {
      get host() {
        return hostRef.current;
      }
    });
    var [{ state }] = (0, import_web.useThemeWithState)({}), result = (0, import_web.getSplitStyles)(propsRest, isText ? import_web.Text.staticConfig : import_web.View.staticConfig, state == null ? void 0 : state.theme, state == null ? void 0 : state.name, {
      unmounted: !1
    }, {
      isAnimated: !1,
      noClass: !0
    }), props = result.viewProps, Element = tag, transformedProps = (_hooks_usePropsTransform = import_web.hooks.usePropsTransform) === null || _hooks_usePropsTransform === void 0 ? void 0 : _hooks_usePropsTransform.call(import_web.hooks, tag, props, stateRef, !1);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Element, {
      ...transformedProps,
      ref: composedRefs
    });
  }));
  return Component.acceptTagProp = !0, Component;
}
var AnimatedView = createTamaguiAnimatedComponent("div"), AnimatedText = createTamaguiAnimatedComponent("span"), onlyAnimateKeys = {
  transform: !0,
  opacity: !0,
  height: !0,
  width: !0,
  backgroundColor: !0,
  borderColor: !0,
  borderLeftColor: !0,
  borderRightColor: !0,
  borderTopColor: !0,
  borderBottomColor: !0,
  borderRadius: !0,
  borderTopLeftRadius: !0,
  borderTopRightRadius: !0,
  borderBottomLeftRadius: !0,
  borderBottomRightRadius: !0,
  borderLeftWidth: !0,
  borderRightWidth: !0,
  borderTopWidth: !0,
  borderBottomWidth: !0,
  color: !0,
  left: !0,
  right: !0,
  top: !0,
  bottom: !0,
  fontSize: !0,
  fontWeight: !0,
  lineHeight: !0,
  letterSpacing: !0
};
function createAnimations(animations) {
  return {
    View: import_web.isWeb ? AnimatedView : import_react_native_reanimated.default.View,
    Text: import_web.isWeb ? AnimatedText : import_react_native_reanimated.default.Text,
    // View: Animated.View,
    // Text: Animated.Text,
    isReactNative: !0,
    animations,
    usePresence: import_use_presence.usePresence,
    ResetPresence: import_use_presence.ResetPresence,
    useAnimatedNumber(initial) {
      var sharedValue = (0, import_react_native_reanimated.useSharedValue)(initial);
      return import_react.default.useMemo(function() {
        return {
          getInstance() {
            "worklet";
            return sharedValue;
          },
          getValue() {
            "worklet";
            return sharedValue.value;
          },
          setValue(next) {
            "worklet";
            var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              type: "spring"
            }, onFinish = arguments.length > 2 ? arguments[2] : void 0;
            config.type === "direct" ? (sharedValue.value = next, onFinish == null || onFinish()) : config.type === "spring" ? sharedValue.value = (0, import_react_native_reanimated.withSpring)(next, config, onFinish ? function() {
              "worklet";
              (0, import_react_native_reanimated.runOnJS)(onFinish)();
            } : void 0) : sharedValue.value = (0, import_react_native_reanimated.withTiming)(next, config, onFinish ? function() {
              "worklet";
              (0, import_react_native_reanimated.runOnJS)(onFinish)();
            } : void 0);
          },
          stop() {
            "worklet";
            (0, import_react_native_reanimated.cancelAnimation)(sharedValue);
          }
        };
      }, [
        sharedValue
      ]);
    },
    useAnimatedNumberReaction(param, onValue) {
      var { value } = param, instance = value.getInstance();
      return (0, import_react_native_reanimated.useAnimatedReaction)(
        function() {
          return instance.value;
        },
        function(next, prev) {
          prev !== next && (0, import_react_native_reanimated.runOnJS)(onValue)(next);
        },
        // dependency array is very important here
        [
          onValue,
          instance
        ]
      );
    },
    /**
    * `getStyle` must be a worklet
    */
    useAnimatedNumberStyle(val, getStyle) {
      var instance = val.getInstance(), derivedValue = (0, import_react_native_reanimated.useDerivedValue)(
        function() {
          return instance.value;
        },
        // dependency array is very important here
        [
          instance,
          getStyle
        ]
      );
      return (0, import_react_native_reanimated.useAnimatedStyle)(
        function() {
          return getStyle(derivedValue.value);
        },
        // dependency array is very important here
        [
          val,
          getStyle,
          derivedValue,
          instance
        ]
      );
    },
    useAnimations: function(animationProps) {
      var { props, presence, style, componentState } = animationProps, animationKey = Array.isArray(props.animation) ? props.animation[0] : props.animation, isHydrating = componentState.unmounted === !0, disableAnimation = isHydrating || !animationKey, animate = {}, dontAnimate = {};
      if (disableAnimation)
        dontAnimate = style;
      else {
        var animateOnly = props.animateOnly;
        for (var key in style) {
          var value = style[key];
          !onlyAnimateKeys[key] || value === "auto" || typeof value == "string" && value.startsWith("calc") || animateOnly && !animateOnly.includes(key) ? dontAnimate[key] = value : animate[key] = value;
        }
      }
      componentState.unmounted === "should-enter" && (dontAnimate = style);
      var styles = function() {
        var animateStr = JSON.stringify(animate);
        return import_react.default.useMemo(function() {
          return JSON.parse(animateStr);
        }, [
          animateStr
        ]);
      }(), isExiting = !!(presence != null && presence[1]), presenceContext = import_react.default.useContext(import_use_presence.PresenceContext), usePresenceValue = presence || void 0, transition = isHydrating ? {
        type: "transition",
        duration: 0
      } : animations[animationKey], hasClonedTransition = !1;
      if (Array.isArray(props.animation)) {
        var config = props.animation[1];
        if (config && typeof config == "object")
          for (var key1 in config) {
            var val = config[key1];
            hasClonedTransition || (transition = Object.assign({}, transition), hasClonedTransition = !0), typeof val == "string" ? transition[key1] = animations[val] : transition[key1] = val;
          }
      }
      var motiProps = {
        animate: isExiting || componentState.unmounted === !0 ? {} : styles,
        transition: componentState.unmounted ? {
          duration: 0
        } : transition,
        usePresenceValue,
        presenceContext,
        exit: isExiting ? styles : void 0
      }, moti = (0, import_author.useMotify)(motiProps);
      return process.env.NODE_ENV === "development" && props.debug && props.debug !== "profile" && console.info("useMotify(", JSON.stringify(motiProps, null, 2) + ")", {
        "componentState.unmounted": componentState.unmounted,
        motiProps,
        moti,
        style: [
          dontAnimate,
          moti.style
        ]
      }), {
        style: [
          dontAnimate,
          moti.style
        ]
      };
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAnimations
});
//# sourceMappingURL=createAnimations.js.map

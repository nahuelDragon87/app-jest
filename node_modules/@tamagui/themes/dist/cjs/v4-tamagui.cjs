var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: !0
}), mod);
var v4_tamagui_exports = {};
__export(v4_tamagui_exports, {
  tamaguiThemes: () => tamaguiThemes
});
module.exports = __toCommonJS(v4_tamagui_exports);
var import_colors = require("@tamagui/colors"),
  import_v4_createTheme = require("./v4-createTheme.cjs");
const colorTokens = {
    light: {
      blue: import_colors.blue,
      gray: import_colors.gray,
      green: import_colors.green,
      orange: import_colors.orange,
      pink: import_colors.pink,
      purple: import_colors.purple,
      red: import_colors.red,
      yellow: import_colors.yellow
    },
    dark: {
      blue: import_colors.blueDark,
      gray: import_colors.grayDark,
      green: import_colors.greenDark,
      orange: import_colors.orangeDark,
      pink: import_colors.pinkDark,
      purple: import_colors.purpleDark,
      red: import_colors.redDark,
      yellow: import_colors.yellowDark
    }
  },
  lightShadowColor = "rgba(0,0,0,0.04)",
  lightShadowColorStrong = "rgba(0,0,0,0.085)",
  darkShadowColor = "rgba(0,0,0,0.2)",
  darkShadowColorStrong = "rgba(0,0,0,0.3)",
  darkPalette = ["#050505", "#151515", "#191919", "#232323", "#282828", "#323232", "#424242", "#494949", "#545454", "#626262", "#a5a5a5", "#fff"],
  lightPalette = ["#fff", "#f8f8f8", "hsl(0, 0%, 96.3%)", "hsl(0, 0%, 94.1%)", "hsl(0, 0%, 92.0%)", "hsl(0, 0%, 90.0%)", "hsl(0, 0%, 88.5%)", "hsl(0, 0%, 81.0%)", "hsl(0, 0%, 56.1%)", "hsl(0, 0%, 50.3%)", "hsl(0, 0%, 42.5%)", "hsl(0, 0%, 9.0%)"],
  tamaguiThemes = (0, import_v4_createTheme.createThemeSuite)({
    base: {
      palette: {
        dark: darkPalette,
        light: lightPalette
      },
      // we set a bunch of colors like $red1 => $red1
      // we only want to set it on the base light/dark theme
      extra: {
        light: {
          ...colorTokens.light.blue,
          ...colorTokens.light.gray,
          ...colorTokens.light.green,
          ...colorTokens.light.orange,
          ...colorTokens.light.pink,
          ...colorTokens.light.purple,
          ...colorTokens.light.red,
          ...colorTokens.light.yellow,
          shadowColor: lightShadowColorStrong,
          shadowColorHover: lightShadowColorStrong,
          shadowColorPress: lightShadowColor,
          shadowColorFocus: lightShadowColor
        },
        dark: {
          ...colorTokens.dark.blue,
          ...colorTokens.dark.gray,
          ...colorTokens.dark.green,
          ...colorTokens.dark.orange,
          ...colorTokens.dark.pink,
          ...colorTokens.dark.purple,
          ...colorTokens.dark.red,
          ...colorTokens.dark.yellow,
          shadowColor: darkShadowColorStrong,
          shadowColorHover: darkShadowColorStrong,
          shadowColorPress: darkShadowColor,
          shadowColorFocus: darkShadowColor
        }
      }
    },
    accent: {
      palette: {
        dark: lightPalette,
        light: darkPalette
      },
      template: "inverse"
    },
    childrenThemes: {
      gray: {
        palette: {
          dark: Object.values(colorTokens.dark.gray),
          light: Object.values(colorTokens.light.gray)
        }
      },
      blue: {
        palette: {
          dark: Object.values(colorTokens.dark.blue),
          light: Object.values(colorTokens.light.blue)
        }
      },
      orange: {
        palette: {
          dark: Object.values(colorTokens.dark.orange),
          light: Object.values(colorTokens.light.orange)
        }
      },
      red: {
        palette: {
          dark: Object.values(colorTokens.dark.red),
          light: Object.values(colorTokens.light.red)
        }
      },
      yellow: {
        palette: {
          dark: Object.values(colorTokens.dark.yellow),
          light: Object.values(colorTokens.light.yellow)
        }
      },
      green: {
        palette: {
          dark: Object.values(colorTokens.dark.green),
          light: Object.values(colorTokens.light.green)
        }
      },
      purple: {
        palette: {
          dark: Object.values(colorTokens.dark.purple),
          light: Object.values(colorTokens.light.purple)
        }
      },
      pink: {
        palette: {
          dark: Object.values(colorTokens.dark.pink),
          light: Object.values(colorTokens.light.pink)
        }
      },
      tan: {
        palette: {
          light: ["hsla(40, 30%, 98%, 1)", "hsla(40, 24%, 94%, 1)", "hsla(38, 23%, 91%, 1)", "hsla(36, 20%, 90%, 1)", "hsla(36, 20%, 88%, 1)", "hsla(35, 20%, 85%, 1)", "hsla(35, 21%, 74%, 1)", "hsla(34, 20%, 70%, 1)", "hsla(35, 20%, 67%, 1)", "hsla(34, 19%, 47%, 1)", "hsla(35, 18%, 37%, 1)", "hsla(35, 17%, 20%, 1)"],
          dark: ["hsla(30, 9%, 10%, 1)", "hsla(30, 10%, 12%, 1)", "hsla(31, 11%, 18%, 1)", "hsla(30, 12%, 23%, 1)", "hsla(30, 14%, 28%, 1)", "hsla(30, 16%, 33%, 1)", "hsla(30, 18%, 38%, 1)", "hsla(30, 20%, 45%, 1)", "hsla(30, 21%, 50%, 1)", "hsla(29, 22%, 58%, 1)", "hsla(34, 24%, 70%, 1)", "hsla(11, 12%, 79%, 1)"]
        }
      }
    },
    grandChildrenThemes: {
      alt1: {
        template: "alt1"
      },
      alt2: {
        template: "alt2"
      },
      surface1: {
        template: "surface1"
      },
      surface2: {
        template: "surface2"
      },
      surface3: {
        template: "surface3"
      }
    }
  });
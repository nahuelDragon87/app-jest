var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var v4_createTheme_exports = {};
__export(v4_createTheme_exports, {
  PALETTE_BACKGROUND_OFFSET: () => import_getThemeSuitePalettes2.PALETTE_BACKGROUND_OFFSET,
  createPalettes: () => createPalettes,
  createSimpleThemeBuilder: () => createSimpleThemeBuilder,
  createThemeSuite: () => createThemeSuite,
  createThemes: () => createThemes,
  defaultComponentThemes: () => defaultComponentThemes,
  defaultTemplates: () => import_v4_defaultTemplates2.defaultTemplates,
  getComponentThemes: () => getComponentThemes,
  getThemeSuitePalettes: () => import_getThemeSuitePalettes2.getThemeSuitePalettes
});
module.exports = __toCommonJS(v4_createTheme_exports);
var import_theme_builder = require("@tamagui/theme-builder"), import_color2k = require("color2k"), import_getThemeSuitePalettes = require("./getThemeSuitePalettes"), import_v4_defaultTemplates = require("./v4-defaultTemplates"), import_getThemeSuitePalettes2 = require("./getThemeSuitePalettes"), import_v4_defaultTemplates2 = require("./v4-defaultTemplates");
const defaultPalettes = createPalettes(
  getThemesPalettes({
    base: {
      palette: ["#fff", "#000"]
    },
    accent: {
      palette: ["#ff0000", "#ff9999"]
    }
  })
);
function createThemeSuite(props) {
  const {
    accent,
    childrenThemes,
    grandChildrenThemes,
    templates = import_v4_defaultTemplates.defaultTemplates,
    componentThemes = defaultComponentThemes
  } = props;
  return createSimpleThemeBuilder({
    extra: props.base.extra,
    componentThemes,
    palettes: createPalettes(getThemesPalettes(props)),
    templates,
    accentTheme: !!accent,
    childrenThemes: normalizeSubThemes(childrenThemes),
    grandChildrenThemes: grandChildrenThemes ? normalizeSubThemes(grandChildrenThemes) : void 0
  }).themes;
}
function normalizeSubThemes(defs) {
  return Object.fromEntries(
    Object.entries(defs || {}).map(([name, value]) => [
      name,
      {
        palette: name,
        template: value.template || "base"
      }
    ])
  );
}
function createSimpleThemeBuilder(props) {
  const {
    extra,
    childrenThemes = null,
    grandChildrenThemes = null,
    templates = import_v4_defaultTemplates.defaultTemplates,
    palettes = defaultPalettes,
    componentThemes = templates === import_v4_defaultTemplates.defaultTemplates ? defaultComponentThemes : void 0
  } = props;
  let themeBuilder = (0, import_theme_builder.createThemeBuilder)().addPalettes(palettes).addTemplates(templates).addThemes({
    light: {
      template: "base",
      palette: "light",
      nonInheritedValues: extra?.light
    },
    dark: {
      template: "base",
      palette: "dark",
      nonInheritedValues: extra?.dark
    }
  }).addChildThemes(
    palettes.light_accent ? {
      accent: [
        {
          parent: "light",
          template: "base",
          palette: "light_accent"
        },
        {
          parent: "dark",
          template: "base",
          palette: "dark_accent"
        }
      ]
    } : {}
  );
  return childrenThemes && (themeBuilder = themeBuilder.addChildThemes(childrenThemes, {
    avoidNestingWithin: ["accent"]
  })), grandChildrenThemes && (themeBuilder = themeBuilder.addChildThemes(grandChildrenThemes, {
    avoidNestingWithin: ["accent"]
  })), componentThemes && (themeBuilder = themeBuilder.addComponentThemes(getComponentThemes(componentThemes), {
    avoidNestingWithin: [
      // ...Object.keys(childrenThemes || {}),
      ...Object.keys(grandChildrenThemes || {})
    ]
  })), {
    themeBuilder,
    themes: themeBuilder.build()
  };
}
function createThemes(props) {
  const palettes = createPalettes(props.palettes);
  return createSimpleThemeBuilder({
    palettes,
    templates: props.templates,
    componentThemes: defaultComponentThemes
  });
}
function getSchemePalette(colors) {
  return {
    light: colors,
    dark: colors.toReversed()
  };
}
function getAnchors(palette) {
  const numItems = palette.light.length;
  return palette.light.map((lcolor, index) => {
    const dcolor = palette.dark[index], [lhue, lsat, llum] = (0, import_color2k.parseToHsla)(lcolor), [dhue, dsat, dlum] = (0, import_color2k.parseToHsla)(dcolor);
    return {
      index: spreadIndex(11, numItems, index),
      hue: { light: lhue, dark: dhue },
      sat: { light: lsat, dark: dsat },
      lum: { light: llum, dark: dlum }
    };
  });
}
function spreadIndex(maxIndex, numItems, index) {
  return Math.round(index / (numItems - 1) * maxIndex);
}
function coerceSimplePaletteToSchemePalette(def) {
  return Array.isArray(def) ? getSchemePalette(def) : def;
}
function getThemesPalettes(props) {
  const base = coerceSimplePaletteToSchemePalette(props.base.palette), accent = props.accent ? coerceSimplePaletteToSchemePalette(props.accent.palette) : null, baseAnchors = getAnchors(base);
  function getSubThemesPalettes(defs) {
    return Object.fromEntries(
      Object.entries(defs).map(([key, value]) => [
        key,
        {
          name: key,
          anchors: value.palette ? getAnchors(coerceSimplePaletteToSchemePalette(value.palette)) : baseAnchors
        }
      ])
    );
  }
  return {
    base: {
      name: "base",
      anchors: baseAnchors
    },
    ...accent && {
      accent: {
        name: "accent",
        anchors: getAnchors(accent)
      }
    },
    ...props.childrenThemes && getSubThemesPalettes(props.childrenThemes),
    ...props.grandChildrenThemes && getSubThemesPalettes(props.grandChildrenThemes)
  };
}
const getComponentThemes = (components) => Object.fromEntries(
  Object.entries(components).map(([componentName, { template }]) => [
    componentName,
    {
      parent: "",
      template: template || "base"
    }
  ])
), defaultComponentThemes = {
  ListItem: { template: "surface1" },
  SelectTrigger: { template: "surface1" },
  Card: { template: "surface1" },
  Button: { template: "surface3" },
  Checkbox: { template: "surface2" },
  Switch: { template: "surface2" },
  SwitchThumb: { template: "inverse" },
  TooltipContent: { template: "surface2" },
  Progress: { template: "surface1" },
  RadioGroupItem: { template: "surface2" },
  TooltipArrow: { template: "surface1" },
  SliderTrackActive: { template: "surface3" },
  SliderTrack: { template: "surface1" },
  SliderThumb: { template: "inverse" },
  Tooltip: { template: "inverse" },
  ProgressIndicator: { template: "inverse" },
  Input: { template: "surface1" },
  TextArea: { template: "surface1" }
};
function createPalettes(palettes) {
  const accentPalettes = palettes.accent ? (0, import_getThemeSuitePalettes.getThemeSuitePalettes)(palettes.accent) : null, basePalettes = (0, import_getThemeSuitePalettes.getThemeSuitePalettes)(palettes.base);
  return Object.fromEntries(
    Object.entries(palettes).flatMap(([name, palette]) => {
      const palettes2 = (0, import_getThemeSuitePalettes.getThemeSuitePalettes)(palette), oppositePalettes = name.startsWith("accent") ? basePalettes : accentPalettes, oppositeLight = oppositePalettes.light, oppositeDark = oppositePalettes.dark, bgOffset = 7;
      return [
        [
          name === "base" ? "light" : `light_${name}`,
          [
            oppositeLight[bgOffset],
            ...palettes2.light,
            oppositeLight[oppositeLight.length - bgOffset - 1]
          ]
        ],
        [
          name === "base" ? "dark" : `dark_${name}`,
          [
            oppositeDark[oppositeDark.length - bgOffset - 1],
            ...palettes2.dark,
            oppositeDark[bgOffset]
          ]
        ]
      ];
    })
  );
}
//# sourceMappingURL=v4-createTheme.js.map

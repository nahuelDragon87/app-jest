var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var v4_default_exports = {};
__export(v4_default_exports, {
  defaultThemes: () => defaultThemes
});
module.exports = __toCommonJS(v4_default_exports);
var import_colors = require("@tamagui/colors"), import_v4_createTheme = require("./v4-createTheme");
const colorTokens = {
  light: {
    green: import_colors.green,
    red: import_colors.red,
    yellow: import_colors.yellow
  },
  dark: {
    green: import_colors.greenDark,
    red: import_colors.redDark,
    yellow: import_colors.yellowDark
  }
}, lightShadowColor = "rgba(0,0,0,0.04)", lightShadowColorStrong = "rgba(0,0,0,0.085)", darkShadowColor = "rgba(0,0,0,0.2)", darkShadowColorStrong = "rgba(0,0,0,0.3)", darkPalette = ["#050505", "#fff"], lightPalette = ["#fff", "hsl(0, 0%, 9.0%)"], defaultThemes = (0, import_v4_createTheme.createThemeSuite)({
  base: {
    palette: {
      dark: darkPalette,
      light: lightPalette
    },
    // we set a bunch of colors like $red1 => $red12
    // we only want to set it on the base light/dark theme not all sub-themes
    extra: {
      light: {
        ...colorTokens.light.green,
        ...colorTokens.light.red,
        ...colorTokens.light.yellow,
        shadowColor: lightShadowColorStrong,
        shadowColorHover: lightShadowColorStrong,
        shadowColorPress: lightShadowColor,
        shadowColorFocus: lightShadowColor
      },
      dark: {
        ...colorTokens.dark.green,
        ...colorTokens.dark.red,
        ...colorTokens.dark.yellow,
        shadowColor: darkShadowColorStrong,
        shadowColorHover: darkShadowColorStrong,
        shadowColorPress: darkShadowColor,
        shadowColorFocus: darkShadowColor
      }
    }
  },
  accent: {
    palette: {
      dark: lightPalette,
      light: darkPalette
    },
    template: "inverse"
  },
  childrenThemes: {
    error: {
      palette: {
        dark: Object.values(colorTokens.dark.red),
        light: Object.values(colorTokens.light.red)
      }
    },
    warning: {
      palette: {
        dark: Object.values(colorTokens.dark.yellow),
        light: Object.values(colorTokens.light.yellow)
      }
    },
    success: {
      palette: {
        dark: Object.values(colorTokens.dark.green),
        light: Object.values(colorTokens.light.green)
      }
    }
  }
});
//# sourceMappingURL=v4-default.js.map

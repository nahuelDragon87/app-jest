import { createThemeBuilder } from "@tamagui/theme-builder";
import { parseToHsla } from "color2k";
import { getThemeSuitePalettes } from "./getThemeSuitePalettes";
import { defaultTemplates } from "./v4-defaultTemplates";
import { getThemeSuitePalettes as getThemeSuitePalettes2, PALETTE_BACKGROUND_OFFSET } from "./getThemeSuitePalettes";
import { defaultTemplates as defaultTemplates2 } from "./v4-defaultTemplates";
var defaultPalettes = createPalettes(getThemesPalettes({
  base: {
    palette: [
      "#fff",
      "#000"
    ]
  },
  accent: {
    palette: [
      "#ff0000",
      "#ff9999"
    ]
  }
}));
function createThemeSuite(props) {
  var { accent, childrenThemes, grandChildrenThemes, templates = defaultTemplates, componentThemes = defaultComponentThemes } = props, builder = createSimpleThemeBuilder({
    extra: props.base.extra,
    componentThemes,
    palettes: createPalettes(getThemesPalettes(props)),
    templates,
    accentTheme: !!accent,
    childrenThemes: normalizeSubThemes(childrenThemes),
    grandChildrenThemes: grandChildrenThemes ? normalizeSubThemes(grandChildrenThemes) : void 0
  });
  return builder.themes;
}
function normalizeSubThemes(defs) {
  return Object.fromEntries(Object.entries(defs || {}).map(function(param) {
    var [name, value] = param;
    return [
      name,
      {
        palette: name,
        template: value.template || "base"
      }
    ];
  }));
}
function createSimpleThemeBuilder(props) {
  var { extra, childrenThemes = null, grandChildrenThemes = null, templates = defaultTemplates, palettes = defaultPalettes, componentThemes = templates === defaultTemplates ? defaultComponentThemes : void 0 } = props, themeBuilder = createThemeBuilder().addPalettes(palettes).addTemplates(templates).addThemes({
    light: {
      template: "base",
      palette: "light",
      nonInheritedValues: extra?.light
    },
    dark: {
      template: "base",
      palette: "dark",
      nonInheritedValues: extra?.dark
    }
  }).addChildThemes(palettes.light_accent ? {
    accent: [
      {
        parent: "light",
        template: "base",
        palette: "light_accent"
      },
      {
        parent: "dark",
        template: "base",
        palette: "dark_accent"
      }
    ]
  } : {});
  return childrenThemes && (themeBuilder = themeBuilder.addChildThemes(childrenThemes, {
    avoidNestingWithin: [
      "accent"
    ]
  })), grandChildrenThemes && (themeBuilder = themeBuilder.addChildThemes(grandChildrenThemes, {
    avoidNestingWithin: [
      "accent"
    ]
  })), componentThemes && (themeBuilder = themeBuilder.addComponentThemes(getComponentThemes(componentThemes), {
    avoidNestingWithin: [
      // ...Object.keys(childrenThemes || {}),
      ...Object.keys(grandChildrenThemes || {})
    ]
  })), {
    themeBuilder,
    themes: themeBuilder.build()
  };
}
function createThemes(props) {
  var palettes = createPalettes(props.palettes);
  return createSimpleThemeBuilder({
    palettes,
    templates: props.templates,
    componentThemes: defaultComponentThemes
  });
}
function getSchemePalette(colors) {
  return {
    light: colors,
    dark: colors.toReversed()
  };
}
function getAnchors(palette) {
  var maxIndex = 11, numItems = palette.light.length, anchors = palette.light.map(function(lcolor, index) {
    var dcolor = palette.dark[index], [lhue, lsat, llum] = parseToHsla(lcolor), [dhue, dsat, dlum] = parseToHsla(dcolor);
    return {
      index: spreadIndex(maxIndex, numItems, index),
      hue: {
        light: lhue,
        dark: dhue
      },
      sat: {
        light: lsat,
        dark: dsat
      },
      lum: {
        light: llum,
        dark: dlum
      }
    };
  });
  return anchors;
}
function spreadIndex(maxIndex, numItems, index) {
  return Math.round(index / (numItems - 1) * maxIndex);
}
function coerceSimplePaletteToSchemePalette(def) {
  return Array.isArray(def) ? getSchemePalette(def) : def;
}
function getThemesPalettes(props) {
  var base = coerceSimplePaletteToSchemePalette(props.base.palette), accent = props.accent ? coerceSimplePaletteToSchemePalette(props.accent.palette) : null, baseAnchors = getAnchors(base);
  function getSubThemesPalettes(defs) {
    return Object.fromEntries(Object.entries(defs).map(function(param) {
      var [key, value] = param;
      return [
        key,
        {
          name: key,
          anchors: value.palette ? getAnchors(coerceSimplePaletteToSchemePalette(value.palette)) : baseAnchors
        }
      ];
    }));
  }
  return {
    base: {
      name: "base",
      anchors: baseAnchors
    },
    ...accent && {
      accent: {
        name: "accent",
        anchors: getAnchors(accent)
      }
    },
    ...props.childrenThemes && getSubThemesPalettes(props.childrenThemes),
    ...props.grandChildrenThemes && getSubThemesPalettes(props.grandChildrenThemes)
  };
}
var getComponentThemes = function(components) {
  return Object.fromEntries(Object.entries(components).map(function(param) {
    var [componentName, { template }] = param;
    return [
      componentName,
      {
        parent: "",
        template: template || "base"
      }
    ];
  }));
}, defaultComponentThemes = {
  ListItem: {
    template: "surface1"
  },
  SelectTrigger: {
    template: "surface1"
  },
  Card: {
    template: "surface1"
  },
  Button: {
    template: "surface3"
  },
  Checkbox: {
    template: "surface2"
  },
  Switch: {
    template: "surface2"
  },
  SwitchThumb: {
    template: "inverse"
  },
  TooltipContent: {
    template: "surface2"
  },
  Progress: {
    template: "surface1"
  },
  RadioGroupItem: {
    template: "surface2"
  },
  TooltipArrow: {
    template: "surface1"
  },
  SliderTrackActive: {
    template: "surface3"
  },
  SliderTrack: {
    template: "surface1"
  },
  SliderThumb: {
    template: "inverse"
  },
  Tooltip: {
    template: "inverse"
  },
  ProgressIndicator: {
    template: "inverse"
  },
  Input: {
    template: "surface1"
  },
  TextArea: {
    template: "surface1"
  }
};
function createPalettes(palettes) {
  var accentPalettes = palettes.accent ? getThemeSuitePalettes(palettes.accent) : null, basePalettes = getThemeSuitePalettes(palettes.base), next = Object.fromEntries(Object.entries(palettes).flatMap(function(param) {
    var [name, palette] = param, _$palettes = getThemeSuitePalettes(palette), isAccent = name.startsWith("accent"), oppositePalettes = isAccent ? basePalettes : accentPalettes, oppositeLight = oppositePalettes.light, oppositeDark = oppositePalettes.dark, bgOffset = 7, out = [
      [
        name === "base" ? "light" : `light_${name}`,
        [
          oppositeLight[bgOffset],
          ..._$palettes.light,
          oppositeLight[oppositeLight.length - bgOffset - 1]
        ]
      ],
      [
        name === "base" ? "dark" : `dark_${name}`,
        [
          oppositeDark[oppositeDark.length - bgOffset - 1],
          ..._$palettes.dark,
          oppositeDark[bgOffset]
        ]
      ]
    ];
    return out;
  }));
  return next;
}
export {
  PALETTE_BACKGROUND_OFFSET,
  createPalettes,
  createSimpleThemeBuilder,
  createThemeSuite,
  createThemes,
  defaultComponentThemes,
  defaultTemplates2 as defaultTemplates,
  getComponentThemes,
  getThemeSuitePalettes2 as getThemeSuitePalettes
};
//# sourceMappingURL=v4-createTheme.js.map
